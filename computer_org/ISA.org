#+title: Instruction Set Architecture

An instruction set is the language of a computer. Computer designers have a
common goal: find a language that makes it easy to build the hardware and the
compiler while maximizing performance and minimizing cost and energy.

#+begin_quote
The really decisive considerations from the present point of view, in selecting an [instruction set], are more of a practical nature: simplicity of the equipment demanded by the [instruction set], and the clarity of its application to the actually important problems together with the speed of its
handling of those problems.
#+end_quote

A computer must be able to perform a set of operations. These operations take a
limited number of operands, typically from special locations built in hardware
called /registers/. For RISC ISAs, data must be transferred to/from the memory
by /data transfer instructions/ (load & store) to be operated on. Memory is
usually byte-addressable on modern computers. Registers are fast and are the
only locations where data can be used. An ISA must have enough registers and
compilers/programmers must use registers efficiently.

Instructions are represented as binary numbers of predefined formats (stored program).


One trick to test if a number is negative or larger than another number is to
use unsigned test on signed numbers.


* Design Principle

- *Simplicity favors regularity*: hardware for a variable number of operands is
  more complicated than hardware for a fixed number.

- *Smaller is faster*: limited number of registers in an ISA. Not absolute.

- *Good design demands good compromises*: fixed-length instruction format or
  a single instruction format with variable length.

* Operand Types (Addressing Modes)

** *Constant* or *Immediate Addressing*

Due to limited length of the immediate field inside an instruction, an immediate
number has limited range, therefore load/store instructions often loads only
from relative constant addresses. To move even a full word into a register, it
is required for some ISAs to combine several instructions to implement such a
simple task. Some assemblers provides some pseudoinstructions to simplify
programming.

For RISC-V, =LUI= (load the upper 20 bits) combined with an =ADDI= (add the
lower 12 bits) combined are used to load a 32-bit immediate. RISC-V uses *PC-relative addressing* for both
conditional branches and conditional jumps: branching/jumping around the current
instruction. To far jump to a procedure with an wide address, =LUI= (absolute number)
or =AUIPC= (the operand is a relative address to the pc) loads the upper
part in a temporary register and =JALR= adds the lower and jumps there (still
the provided register contains a pc-relative address, even if a large one).

Since RISC-V has a fixed-length instruction format, the unit of the immediate
operand in a jump/branch instruction is halfword (2 bytes), that is, these
instructions cannot jump an address of odd number.

To conditionally branch to a
far address, the condition can be inverted and an unconditional jump follows to support a far jump.

#+begin_src asm
// semantically beq x10, x0, L1
bne x10, x0, L2
jal L1
L2:
#+end_src

** *Register Addressing
** *Base/Displacement Addressing*

Historically, some ISAs uses the base register for the index and the offset
constant for the starting address of an array, contrary to =base+offset=.
Today's memory addresses are too large to fit in the offset so they are placed
in the register.


** *PC-Relative Addressing*
* Branching

What distinguishes a computer from a simple calculator is a its ability to make
decisions. ISAs typically provides conditional branch instructions and
unconditional branch may be emulated by =beq x0, x0, dest= or =jal x0, dest=. An
=if= statement exits a branch unconditionally while a loop only exits the body
upon certain condition. ISAs' implementation of conditional branches may branch
directly, or set some flags and then test and branch, or set some register and
branch based on the value in that register. One downside to condition flags is
that if many instructions always set them, it will make it difficult for
pipelined execution.


* Procedures

Procedures are not simply a software concept: they are already taken into
consideration during computer design and the mechanism has been baked into
hardware design.

ISAs provide instructions to implement procedures. RISC-V provides a special
branch instruction =JAL= (jump and link) that branches to a specific address and
saves the return address in a register to be used by the procedure to return to
the calling site with =JALR=.

The values of certain registers (argument registers, return address register, frame pointer, temporary registers and other saved registers) must be saved  on the stack and
restored (by the caller or the callee) across procedure calls to avoid data loss
so that the caller may use them again.
Some registers are mandated by a calling convention to be saved either by the
caller or by the callee. A temporary register is not required by a calling
convention to be saved and may be used  by the callee, the caller should decide
whether or not this register should be saved. As long as
registers may be reused by the callee, they have to be saved in advance.
Register preservation stands from the view of the caller not the callee.

Aside from saving registers, the stack is responsible for saving extra local
data. An additional register (frame pointer) that points to the first word of
the procedure frame (also called *activation record*) to provide a base address
(an anchor)
for that frame.

On RISC-V typically by the standard calling convention, the stack pointer is
fully descending. The x86 stack pointer is also fully descending by the ISA
=push= and =pop=.

* Synchronization

#+begin_quote
In computing, synchronization mechanisms are typically built with user-level
software routines that rely on hardware-supplied synchronization instructions.
#+end_quote

One such common hardware primitive is atomic swap, used to implement a lock: a
memory location holds a value to indicate the lock status, 0 for unlocked
and 1 for locked. An atomic swap swaps the memory location with a register of
value 1. If locked, the register is still 1, if not, the register will be 0.
Only one occurrence of such atomic swaps will return a 0 and any atomic swaps
that occur later and return 1 should lead to a wait.
RISC-V, on the other hand, uses the LR/SC scheme, a pair of instructions that
first loads the lock value and later uses another
conditional store instruction that only stores a new lock value if the lock
content is not modified, that is, the lock is locked only once by the one
that executes the conditional store first. Here a change test and a store is
done atomically.

#+begin_src asm
// atomic exchange, note the loop is not for spin-wait but to ensure atomicity
again:
    lr.w x10, (x20)
    sc.w x11, x23, (x20)
    bne x11, x0, again // failed sc.w is not atomic, try again
    addi x23, x10, 0

// spin lock
    addi x12, x0, 1
again:
    lr.w x10, (x20)
    bne x10, x0, again
    sc.w x11, x12, (x20)
    bne x11, x0, again

// to release a lock simple
sw 0(x20)
#+end_src

* Program Translation and Execution

The assembler can treat common variations of machine language instructions as if
they were instructions in their own right, called *pseudoinstructions*. These
pseudoinstructiosn are translated into equivalent machine instructions. RISC-V
has no buillt-in =mv= or =li= (load immediate number), which are often
implemented using =addi= or a combination of several instructions. RISC-V
distinguishes immediate operations (=addi=, =andi= etc) and normal operations
(=and=); the assembler combines them into a common =and= and translates it
into respective machine instructions.

The assembler translates symbolic instructions into machine instructions,
determines the addresses for all labels. The generated *object file* contains a
header, a text segment, a static data segment, relocation information, symbol
table (labels that are not defined), debugging information.

A link editor (or linker for short) loads separately produced object files,
determines the address of data and instruction labels and patches (edits) both the
internal and external references using the relocation information and symbol
table in each object module. After external references are resolved, the linker
determines the memory location that each module will occupy and edits absolute
addresses to make them relocatable to reflect its true location after linking.
During programming, these symbols are labels: the linker must place proper
numbers (absolute or relative) that conform to the addressing modes of the
instructions to represent actual addresses. Finally, the linker stitches
together the object modules and turns into an executable.

Upon execution, it reads the executable file header to determine size of the text and data
segments, creates an address space  for the text and data, copies the
instructions and data from the executable file into memory, copies the
parameters (if any) to the main program onto the stack, initializes the
processor registers and sets the stack pointer to the first free location,
branches to a start-up
 that copies the parameters into the argument
registers and calls the main routine of the program. When the main routine
returns, the start-up routine terminates the program with an exit system call.

Part of the loader, the dynamic linker is responsible for finding shared
dynamically linked libraries and loading and mapping libraries routines. The
linker finds (actually called by the client code with a routine ID) the correct
address of a library routine and edits the entry for
that routine call the first time it is called by client code.
