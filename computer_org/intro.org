* The Books

The book "Computer Organization and Design" is intended for software designers
to understand the principles of basic hardware techniques at work in a system
while "Computer Architecture: A Quantitative Approach" aims to create realistic
design experience for a more professional audience using quantitative
methodologies instead of a descriptive approach. RISC-V is used as an example
ISA due to its open-source nature and hardware/emulator availability.

* Why Learn Computer Organization and Architecture

Based on the current state of the computing field and appreciation of the organizational paradigms.

Modern computer technology requires professionals to understand
both hardware and software. The central ideas in computer organization and
design are the same regardless of hardware or software. Recent developments in
computing, especially multicore microprocessors have made programmers no longer
able to ignore the underlying parallel nature of the hardware they are
programming for some time: the parallel nature of processors and the
hierarchical nature of memories, how the software and hardware interact, what's
determines the performance of a program, the techniques used by the hardware designer
to improve performance (for more read Computer Architecture: A Quantitative
Approach), the founding principles of modern computing. Imrpove program
performance should be a scientific procedure driven by insight and analysis
rather than a complex process of trial and error.

From a programmer's perspective, program performance matters much. It depends on
a combination of

- algorithm

- programming language, compiler and architecture

- processor and memory system

- I/O system (hardware and OS).


** Recent Developments

- The slowing of Moore's Law

- The rise of Domain-Specific Architectures (DSA): e.g. Google's TPU

- Microarchitecture as a security attach surfaces: speculative out-of-order
  execution and hardware multithreading make timing based side-channel attacks
  practical.

- Open instruction sets and open source implementations: e.g. RISC-V

- The re-virtualization of the IT industry and cloud computing.

- Massive increase of personal mobile devices.

-   Design for Moore\'s law. Computer architects must anticipate where
    the technology will be when the design finishes rather than design
    for where it starts.

-   Use abstraction to simplify design: e.g. hardware- system software -
    application software; low-level language - high-level language

-   Making the common case fast will tend to enhance the performance
    better than optimizing the rare case.

-   performance via parallelism

-   performance via pipelining

-   performance via prediction: in some cases, it can be faster on
    average to guests and start working rather than wait until you know
    for sure.

-   hierarchy of memories

-   dependability via redundancy

-   I/O

-   memory: main/primary memory, secondary memory

-   datapath: the component that performs arithmetic operations

-   control: commands the datapath, memory and I/O devices according to
    the instructions of the program.
