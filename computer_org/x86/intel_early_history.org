#+title: Intel Early History

This note covers the history of Intel CPU before modern Core microarchitectures
since 8086.


* Before x86

- *4004*: as the first significant example of LSI with MOS gates, mainly used for calculators
  + 4-bit bus
  + highly integrated, requires fewer external components, mostly as embedded controllers.

- *8008* (1972): more flexible but requires more external circuits.
  + 8-bit data bus, 14-bit address bus (16K memory)
  + partially implemented interrupt mechanism
  + the CPU for the very first commercial non-calculator PCs.

- *8080* (1974): 8008 with registers expanded. A CPU-on-a-chip that is not a
  full product.
  + 8-bit data path, 16-bit address bus
  + extended and enhanced variant of 8080 without binary compatibility but with
    the same basic instruction set and register model. Many of the instructions
    survived into x86.
  + a 8224 clock generator and a 8228 bus controller are required for 8080 to function.
  + a new dedicated stack pointer instead of the internal 7-level call stack.
  + 256 I/O ports in a dedicated I/O address space.

- *8085* (1976): a enhanced version of 8080 implemented with depletion-mode transistors
  + binary compatible with 8080 with only two instructions added
  + 8-bit data width, 16-bit address width

** Similar Processors From Other Vendors

- *Zilog Z80*:
  + designed by none other than Fedrico Faggin, one of the designer of Intel 8080.
  + backward-compatible with Intel 8080 with increased performance and features.
  + wide spread in video game systems and home computers in the '70s and the
    early '80s.

* 8086 (launched in 1978)

A non-strict extension of 8080,basically the same microarchitecture as 8085.

A mixture of random logic and microcode.

- clock frequency 5MHz - 10Hmz

- 40-pin DIP package.

- 16 bit data width: all internal registers as well as internal and external
  data buses are 16-bit wide.
  + multiplexed with the address bus.

- 20 bit address width

- two-stage pipeling: BIU (instructions fetched into the instruction queue), EU
  (execution of fetched instructions). Certain instructions (jump) may require
  flushing the queue (and thus the pipeline), causing a /branch penalty/.

8086 is divided into an Execution Unit (EU) and a Bus interface Unit (BIU). The
BIU is responsible for handling all interfaces with external bus. When the EU
needs to access memory, it make a request to the BIU. When there is no requests
from the EU, the BIU fetches machine instructions from the memory into the
instruction queue.

An additional 8284 clock generator and a 8288 bus controller are required.

8086 is designed to work in a multiprocessing system.

** 8088

A binary-compatible cheap version of 8086, with the external data width reduced
8-bit, thus more compatible with then 8-bit compouter design for IBM.

* 80286 (1982)

- designed for multi-user systems with multitasking applications including
  communications and real-time process control.

- the data bus and the address bus are not multiplexed anymore

- More than 100% performance increase compared to 8086/8088, mainly due to fast
  address calculations and separate address and data buses

- 1.5 micrometer process

- 4MHz to 25MHz

- 24-bit address width, up to 16 MB memory

- On-chip MMU with virtual memory support up to 1GB via segmentation (4 pairs of
  segment registers combined).
  + virtual memory is supported on a segment swapping basis
  + segments can be protected and marked as read-only and execute-only.

- Four privilege levels

** Protected Mode


*** Limitation

- /No easy switch between protected mode and real mode/: reverting from protected mode to real mode requires a hardware-initiated reset (not necessarily a reboot and memory clearance). This caused heavy performance penalty and protected mode is not widely used until 80386. Real mode was designed only for bootstrapping. The OS should run in protected mode.

- /limited address capacbility with 16-bit registers/: an offset register is only 16-bit and four combined provide only 256 KB memory for direct access. Reloading a segment register in protected mode caused a 6-byte segment descriptor to be loaded into the CPU from memory (performance penalty!).

*** Compatibility with Real-Mode DOS Programs

In protected mode, memory management and interrupt handling were done
differently than in real mode and memory that does not belong to one program is
not accessible (intended by design), which is incompatible with existing DOS programs.

** OS Support

- Concurrent DOS 286: run fully in protected mode with real mode program compatibilty

- Microsoft Xenix

- Minix

* 80386 (1985)

Fully 32-bit CPU (internal registers, buses and external buses).

- Up to 4GB physical memory and 64 TB virtual memory ($2^14$ segment selectors
  times $2^{32}$)
  + a fixed 4-KB page size

- Support for parallel stages

** Segmentation Under Protected Mode

The  value in a segment register is no longer an absolute value for the segment,
but a selector, an offset into the *Global Descriptor Table* (maintained by the
=GDTR= register, loaded by =LGDT=), of which an entry
of 8 bytes describes a segment. This GDT is controlled by the OS and exposed to
user programs directly and segment addresses are completely by the OS.

#+begin_src
base: 32-bit, containing the linear address where the segment begins
limit: 20-bit, the maximum addressable unit
access byte: present, privilege level, type, executable, direction, readable/writable, accessed
flags: granularity (1 byte or 4KB per addressable unit, that is, each segment is 4GB in maximum)
#+end_src

=CS= points to one segment and other segment registers use another (=CS= cannot
load a data descriptor), this somehow helps security (but now we have =NX= bit
on modern x86 CPUs).

Most C compilers assume a flat-memory model, where the segment
part is ignored. FreePascal have long pointer types that support such
segmentation mechanism.

** Virtual 8086 Mode

A hardware-virtualization technique under protected mode.

A V86 monitor at ring 0 and in protected mode monitors the 8086 real-mode
program at ring 3. The CPU traps certain events and calls the V86 monitor which
examines what the real mode program is trying to do and acts as a proxy to
interface with the hardware or terminates the real-mode program if the behavior
is not allowed.


** 386SX

A reduced version with 16-bit external data bus and a 24-bit address bus.

* 80486 (1989)

The first tightly-pipelined x86 design. Production continued into the late 2000s.

- Significantly higher performance than 386

- Separation of CPU clock rate and bus rate

- Up to 100MHz clock rate

- five-pipelined stages

- 8/16-KB on-chip level 1 cache.

- an integrated faster x87 FPU

- power saving and system management capabilities

- =CMPXCHG=, =XADD= ,=BSWAP= and other atomic operation instructions
