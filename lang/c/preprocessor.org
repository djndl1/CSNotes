#+title: Preprocessor

* Charsets

- *source file character set* ::

- *source/input character set* :: the encoding used to interpret the source
  files. Text is first converted into this charset before being processed by the preprocessor.
  + by default UTF-8 in GCC; UTF-8 if BOM is there, current locale if none in MSVC

- *execution character set* :: the encoding used for the text of the program
  that is input to the compilation phase after preprocessing. Used for the
  internal representation of any string or character literals in the compiled program.

* Header

The =#include= directive works by directing the C preprocessor to scan the
specified file as input before continuing with the rest of the current file.
=#include= is simply text paste except that the end of a header signals a token
boundary. Comments and string literals may not continue in the including file.
An included file may contain a statement that starts in it but concludes in the
including file.

Header names in =#include= directives behave like string constants without
the escaping mechanism.

=-I= puts the specified path before the system path and after the directory of
the current file. =-iquote= separate the search paths used by
=#include "file.h"= and =#include <file.h>=. =-nostdinc= turns off any default
system path.

To dynamically include a file, =#include MACRO= (computed include) may be used.

System headers are treated differently by GCC so that implicit warnings are
turned off.

* Preprocessing Steps

- source text is broken into lines; Line numbers may mess up if EOL markers are inconsistent.

- (legacy) trigraphs are replaced by their corresponding single characters.

- Continued lines are merged into a single line (logical line)

- comments are replaced with single spaces.

- *tokenization*: the input is converted into a sequence of preprocessing
  tokens, not completely corresponding to C language tokens.
  + tokenization is greedy in case a sequence of characters may be tokenized
    into multiple ways.
  + once tokenized, token boundaries never change. Two tokens cannot be
    concatenated by simply putting them together.

- Inclusion of header files

- macro expansions

- conditional compilation

- line control:

- diagnostics: detect problems at compile time

** Macro Expansion Order

Normally, the actual arguments of a function-like macro are macro expanded before the function-like macro 
is expanded. However, if either parameter is used as an operator of =#= or =##=, the actual argument is not expanded first. That is why stringization or concatenation requires two-level macro expansion.

* Include Guards and Pragma Once

#+begin_quote
neither the Unix nor the Windows filesystem API offer any mechanism that guarantees to tell you whether two absolute pathnames refer to the same file.
#+end_quote

The compiler includes a header file once as long as the two paths to the file has the same guard.
With two paths, the compiler cannot distinguish the two paths denotes the same file and thus
=pragma once= might fail.

* How to Add Internal Headers

Some headers are meant only for internal consumption. Such headers may be
protected by a custom macro. If this macro is not defined (external), a =#error=
should stop the compilation. Any internal usage of the header defines this macro.

* Headers May Be Platform-Dependent

Headers may be generated/configured based on target platforms and are part of
the software distribution.

e.g. Glib has some byte order swap macro that are defined during configuration,
depending on the compilation target.

* Function Names

=__FUNCTION__= (GCC and MSVC, inside a function), =__func__= (C99),
=__PRETTY_FUNCTION__= (GCC, also at top level. In C++, the function name is
fully qualified and contains the signature)

These three are variables, not

* MSVC Symbol Visibility Macro

MSVC by default hides all symbols unless marked as =__declspec(dllexport)=.
The header files may be used for both internal compilation and external
consumption. Thus, a macro may be defined for conditional export/import.
=__declspec(dllimport)= is optional for functions but [[https://devblogs.microsoft.com/oldnewthing/20060724-00/?p=30403][it's better to have]].

#+begin_src c
#ifndef GLIB_VAR
#  ifdef G_PLATFORM_WIN32
#    ifdef GLIB_STATIC_COMPILATION
#      define GLIB_VAR extern
#    else /* !GLIB_STATIC_COMPILATION */
#      ifdef GLIB_COMPILATION
#        ifdef DLL_EXPORT
#          define GLIB_VAR extern __declspec(dllexport)
#        else /* !DLL_EXPORT */
#          define GLIB_VAR extern
#        endif /* !DLL_EXPORT */
#      else /* !GLIB_COMPILATION */
#        define GLIB_VAR extern __declspec(dllimport)
#      endif /* !GLIB_COMPILATION */
#    endif /* !GLIB_STATIC_COMPILATION */
#  else /* !G_PLATFORM_WIN32 */
#    define GLIB_VAR _GLIB_EXTERN
#  endif /* !G_PLATFORM_WIN32 */
#endif /* GLIB_VAR */
#+end_src
