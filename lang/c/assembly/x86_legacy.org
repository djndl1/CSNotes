* Architecture
  :PROPERTIES:
  :CUSTOM_ID: architecture
  :END:

** Registers

*** General-Purpose Registers

- Accumulator register =AX=: Used in arithmetic operations. However, this does
  not mean addition or any arithmetic operations uses =AX= as the only destination.

- Counter register =CX=: Used in shift/rotate instructions and loops.

- Data register =DX=: Used in arithmetic operations and I/O operations.

- Base register =BX=. Used as a pointer to data (located in segment register DS, when in segmented mode).

*** Stack Pointer

- Stack Pointer register =SP=: Pointer to the top of the stack.

- Stack Base Pointer register =BP=: Used to point to the base of the stack.

Stack pointers are used in combination with =SS= to provide 20-bit address space.

*** Index Pointer

- Source Index register =SI=: Used as a pointer to a source in stream operations.

- Destination Index register =DI=: Used as a pointer to a destination in stream operations.

The order is same as what is used in a push-to-stack operation.

*** Segment Registers

Six Segment Registers:

- Stack Segment =SS=: Pointer to the stack.

- Code Segment =CS=: Pointer to the code.

- Data Segment =DS=: Pointer to the data.

- Extra Segment =ES=: Pointer to extra data ('E' stands for 'Extra').

Additional two segment registers are introduced in 80386

- F Segment =FS=: Pointer to more extra data ('F' comes after 'E').

- G Segment =GS=: Pointer to still more extra data ('G' comes after
  'F').

Values cannot be loaded directly into any segment register; load segment registers via other non-segment register.

In real mode, segment registers were used to addressing a 20-bit address
bus using 16-bit registers. Later, they were used as selectors to
protect memory access.

*** Program Counter

- =IP=: instruction pointer

*** Flags (Status)

The =EFLAGS= is a register used as a collection of boolean bits to store the results of operations and the state of the processors.

- =SF=: sign, the sign of arithmetic or logic operations

- =ZF=: whether the result of an operation is zero

- =CF=: carry, indicating a carry after an 8-bit or 16-bit operation (depending
  on the bitness of the operation)
  + also as overflow status for unsigned operations

- =AF=: auxiliary carry, indicating a carry from D3 to D4 of an operation, used by BCD arithmetic

- =PF=: even parity result of certain operation
  + the parity result depends on the bit-length of the operation.

- =IF=: enable or disable external maskable interrupt  requests

- =TF=: trap, for debugging

- =DF=: direction, used to control the direction of string operations

- =OF=: overflow, set whenever the result of a signed number operation overflows

- =R= and =U=: reserved and undefined

** Memory: Representation, Addressing, Models

20-bit address bus from =0x00000= to =0xFFFFF=.

CPU after 8088 can access high memory called *extended memory*, often used for disk caches, RAM disks and print spoolers, which can be configured as *expanded memory* for programs to store data.

Since a CPU register is 16-bit only, allowing only 64KB address (/segment/).
To access the memory in a fine
granular manner, the /offset register/ is added to the multiplied result,
normally written as =segment:offset=.
Unlike later IA-32 or AMD64, where a single register is enough to access the
entire memory space, on 16-bit 8086, a pointer value has to be represented by
a segment register plus an offset in another register or an immediate number
offset. There is nothing special about segment registers except that they are
reserved specifically for pointer representation. As long as one needs to access the memory, segment registers have to be used.

Code is not supposed to be loaded by the user and so =CS= is not normally changed
by user code. Different memory access instructions assume different segment registers.

*** Program Segments

For 8086, segments are not simply program image sections. They are supposed to
be memory
regions accessed via the three segment registers (code =CS=, data =DS= and stack
=SS=). The 8086 can only access these three segments of 64KB at any given time
due to its limited width of registers even its physical address bus is larger.
Segmented architecture was originally designed to enable a 16-bit processor to
access an address space larger than 64K. The second use since 80286 is to use as
a protection mechanism.

- /physical address/: the address on the external address bus

- /offset address/: an address within a 64KK range segment range

- /logical address/: a pair of a segment value and an offset address

**** Code Segments

The address of the next instruction is represented by the =CS:IP= register pair, where =CS= is the segment and =IP= is
the offset. The program counter =IP= is never used
by itself. The actual address represented by this pair is =(CS << 4) + IP=. =IP=
increments as instruction is executed.

On modern CPUs, instructions are often prefetched so the program counter only reflects the next instruction to execute but not the next one to fetch. It is a conceptual representation of the CPU's state, not an actual register.

The only way to alter =CS= is when execution is switched to another segment:

- far jump

- far call and far return

- from interrupt vector table

- IRET: basically a far return

**** Data Segments

Data are supposed to be put in certain memory regions called data segments and
are accessed through the =CS= segment and an offset register (=BX=, =DI= or
=SI=).

#+begin_src asm
mov al, [bx] // relative to CS
#+end_src

**** Extra Segment

Used as an extra /data segment/.

**** Stack Segment

8086 was designed with memory stacks in mind and a special segment register is
reserved for it and related instructions operate with this segment register =SS= and
its offset register =SP=. =SP= points to the last stack location *occupied*.

The stack grows downward from upper addresses to lower addresses, opposite of =IP=.

=BP= (stack base) is another stack offset that represents the address of the
current stack frame.


*** Point Types

Pointer types are designed by Intel, not purely a programmer's invention.

- /near pointers/: 16-bit offsets within the current segment, determined by the
  value of the current segment register.

- /far pointers/: 32-bit =segment:offset= pairs resolving to 20-bit external
  addresses, the typical representation produced by x86 memory segmentation.

- /huge pointers/: a special types of far pointers that presents a flat memory model. These pointers are normalized so
  that they have the highest possible segment (the most significant 16 bits of
  its physical address) for that address (a pointer may be
  represented by different segment-offset pairs).
  + e.g. =0x15020= is in the segment =0x1502=. Then each such segment (/paragraph/) contains
    only 16 addresses and does not overlapping.

*** Memory Models

Due to 8086's memory segmentation, there are different configurations and usages
for segment registers, resulting in six memory models, listed below

| model   | data | code | definitions                                                            | comment                  |
|---------+------+------+------------------------------------------------------------------------+--------------------------|
| tiny    | near | near | CS=DS=SS                                                               | only one segment is used |
| small   | near | near | DS=SS                                                                  |                          |
| medium  | near | far  | DS=SS, multiple code segments                                          |                          |
| compact | far  | near | single code segment, multiple data segments                            |                          |
| large   | far  | far  | multiple code and data segments                                        |                          |
| huge    | huge | far  | multiple code and data segments; single array be longer than a segment |                          |

*** Memory Map: How Memory Space is Used

#+begin_src
┌───────────────────┐ 00000
│                   │
│                   │
│                   │
│                   │
│      RAM          │
│      640K         │
│                   │
│                   │
│                   │
│                   │ 9FFFF
┌───────────────────┐----
│   videos 128K     │ A0000
└───────────────────┘----
│      ROM          │ C0000
│     256K          │
└───────────────────┘ FFFFF
#+end_src

- /conventional memory/: RAM, from 0x0 to 0x9FFFF

- /upper memory/: Videos + ROM, from 0xA0000 to 0xFFFFF

** Addressing Modes

"Addressing" here means the way to access operands, not simply about memory addressing.

- *register*: the use of registers to hold the data to be manipulated

- *immediate*: the operand as a constant, immediately follows the opcode in the
  instruction.
  + Loading segment registers with immediate operands is not allowed.

The following modes manipulate data in the memory through a data pointer. The
first two correspond to the two modes above but as data pointers.

- *direct*: the data pointer is a constant in the instruction.

  #+begin_src asm
mov dl, [2400]   // DS:2400H

mov [2518], al
  #+end_src

- *register indirect*: the data pointer is in a register

#+begin_src asm
mov cl, [si]
mov [di], ah
#+end_src

- *based relative*: Base registers =BX= (default with =DS=) or =BP= (default with =SS=) along with a displacement value are added as the data pointer
  + supposed to access local variables (thus with =SS=).

#+begin_src asm
mov cx, [bx]+10 ; DS:BX+10, confusing, seems like plus 10 after dreferencing bx
mov cx, [bx+10] ; DS:BX+10
mov cx, 10[bx]  ; weird, at least not ambiguous
#+end_src

- *indexed relative*: Index registers =DI= or =SI= with a displacement;
  + this mode is essentially the same as based relative but uses index
    registers, supposed to access array elements.

- *Based indexed*: the above two combined
  + the register order does not matter, the segment register is always the one
    paired with the base register.

  #+begin_src asm
mov cl, [bx][di]+8 ; DS:(BX+DI+8)
mov cl, [bx][si]+8 ; DS:(BX+SI+8]
mov cl, [bp][di]+8 ; SS:(BP+DI+8)
mov cl, [bp][si]+8 ; SS:(BP+SI+8)
  #+end_src

*** Segment Override

By default, an offset register are combined with a fixed segment register as the
following

| CS | DS         | ES         | SS     |
|----+------------+------------+--------|
| IP | SI, DI, BX | SI, DI, BX | SP, BP |

However, one may override the default segment by explicitly specify the segment

#+begin_src asm
mov al, es:[bx]
#+end_src


** Jump & Branch

- *Far* & *Near*: intrasegment jump versus intersegment jump.

- All *conditional jumps* are short jumps with an offset within -128 and +127
  bytes of =ip=,
  even if the assembly code seems to be using an absolute address, the machine
  code is actually using an offset from =ip= (the next instruction's address).

- *unconditional jump* can be *short* (8-bit displacement from =ip=), *near*
  (16-bit ip-relative, register indirect offset, memory indirect offset),
  *far* (=ip=, =cs= bot can be changed).

- *procedure call* =CALL=, =RET=
  + can be *near* or =far*. =CS= (for far call), =IP= are pushed onto the stack
    upon =CALL=.
  + =RET= directs the CPU to pop out the saved return address and jump back.
  + the =main= entry point is required to be a far call.

** Arithmetic, Logical & Shift Operations

These instructions change the flag register depending on the operands involved
and the result.

- =add=, =adc=, =clc= (clear carry): multiword addition is actually multiple additions with carry

- =sub=, =sbb=: subtraction is done using the adder circuitry (not the =add=
  instruction) with the subtrahend in 2's complement.
  + Since =x - y= is computed as =x + (2^N - y)=. If =x= is greater than =y=,
    =x-y= would be positive and the result overflows. That is, if there is no
    borrow, the carry status is set. The borrow status is the negation of the
    carry status. *However, here the carry flag bit is used to indicate a
    borrow*. The carry flag is inverted.

- =mul= for byte by byte, the result is in a single register, for word by word,
  the result is in =DX:AX=

- =div= (unsigned): for different operand sizes, the numerator and the result are in
  different registers.
  + the denominator cannot be an immediate; The numerator has fixed register(s)
    =AH:AL= or =DX:AX=.
  + division by zero or the quotient is too large for the assigned register
    triggers an exception.

- =and=, =or=, =xor=
  + be careful, these operations clear =CF= and =OF=.
  + =and=: clear bits; test for a zero operand (=and al, al=, =ZF= is set if one is zero)
  + =or=: set bits; test for a zero operand (=or al, al=, =ZF= is set if =al= is zero)
  + =xor=: flip bits; test operand equality (=xor bx, cx=, =ZF= is set if
    equal); clear oneself (=xor ax, ax= clears =ax=)


- =shr=, =shl=
  + =shr= and =shl= shifts the LSB/MSB into the carry flag.

- =cmp=: comparison of *UNSIGNED* numbers. The operands themselves remain
  unchanged but the flags chagne accordingly.


* MASM

** Template Example Analysis

#+include: ../../CodeOfLanguages/ASM/dos/template.asm src asm

When the program begins executing, only =CS= and =SS= have the proper values,
=DS= must be initialized by the program.

It is strongly recommended that only stack segment is use to prevent
fragmentation of stack memory.

** Operators

- =offset expr=: get the offset of the segment of the expression

- =EQU=: does not declare a data item but defines a static constant, like a
  macro in C.

** Directives

- =SEGMENT=, =ENDS=: ; these directives can define segments. =ASSUME= must be
  used to load segment registers with these segment addresses.
  + =.stack=, =.code=, =.data= are some specialized segment directives to set up
    common segments and registers.

- =.model=: memory model, =TINY= =SMALL=, =MEDIUM=, =COMPACT=, =LARGE=, =HUGE=
  are supported
  + Use JWasm
    #+begin_quote
NASM also does not have any directives to support different 16-bit memory models. The programmer
has to keep track of which functions are supposed to be called with a far call and which with a near call,
and is responsible for putting the correct form of RET instruction (RETN or RETF; NASM accepts RET itself
as an alternate form for RETN); in addition, the programmer is responsible for coding CALL FAR
instructions where necessary when calling external functions, and must also keep track of which
external variable definitions are far and which are near.
    #+end_quote

- =.stack=: defines a stack segment, optionally with a certain size (by default
  10224 bytes)

- =DB= (define byte), =DW=, =DD=, =DQ=, =DT= (ten bytes, for packed BCD numbers
  which are never used anymore): allocate data in data memory.
  + =DB= is the only way define an ASCII string, with a pair of single or double
    quotes.

- =ORG= (origin): set location counter

- =N DUP(initval, initval, ...)=: N number of declarations of =initval=

- =?=: data allocated but not initialized in data declarations

- =procname PROC=, =procname ENDP= defines a procedure.

- =END procname= marks the end of a module and defines the entry point

- =.crf file=: generates a cross reference file: an alphabetical of al symbols
  and labels and the locations where they are referenced.

- =.map file=: how code and data are mapped to memory


* ABI

** Calling Convention

- =BP=, =SI=, =DI= are always preserved

- =DX:AX= or simply =AX= is returned.

*** =__cdecl= (the same as in x86-32)

- the parameters are pushed right to left so that the first parameter is nearest
  to the top of the stack.

- the stack is caller-cleaned

- return value in =ax= (=eax=) or =st0= (floating-point)

- =eax=, =ecx=, =edx= are called-saved

- =st0= to =st7= must be empty upon a function call.

Function name decoration consists of a leading underscore =_funcname= for DOS
and Windows.

#+begin_src asm
// int func(A, B, C)
push C
push B
push A
call _func
add esp, 12
#+end_src

Passing of large structures is not specified and is platform-dependent. They may
be placed on the stack and passed by reference under the hood or their members are pushed onto the stack.

** =__pascal=

Used by Turbo Pascal, Delphi and Win16 functions.

No variable number of parameters.

- Parameters are pushed from left to right;

- Function names are converted to uppercase

- returning values is relatively complex:
  + ordinal values in =al=, =ax=, =eax= (32-bit) or =dx:ax= (16-bit).
  + pointers in =ax=, =eax=
  + real values returned in =dx:bx:ax=
  + floating-point values in =st0=
  + strings are returned in a location denoted by =@Result=.

- the stack is callee-cleaned.

** =__fastcall=

Not standardized. Other compilers may do something similar but not compatible.

=__fastcall= was typically faster only for short leaf functions.

- The first parameter in =dx= and the second in =cx=

* Toolchains

** Use JWasm & JWlink

#+begin_src shell
jwasm [-Fl=listingfile] -6 -mz example.asm  # target an Intel P6 CPU, format DOS MZ EXE
jwlink File example.o Name example.exe  system dos # link example.o, output as example.exe, system set to DOS
#+end_src
