* General Computer System Design Steps

** Specification (What-to-do)

General discussion of all the functions that the system will be provided plus a
description of the character of the inputs and outputs the system will handle.
A system is designed to perform a certain task. The nature of the task will
probably limit the system to performing a specific function.

The specification will define the following subsections.

- For each part, possible /error conditions/ must be explicitly listed.

- List all input channels, output channels, all the computational functions.

*** The Inputs Received by the System

The inputs depends on the level of programming being performed.

At the hardware level, the data path width (serial or parallel),
data transfer speed and type (sync
or async), accompanying control information.

The input may contain /data ports/, but not always have /status ports/ (data
availability, error conditions etc.) and
/control ports/ (mode of operation, channel configuration).

*** The Computation Performed by the System

- processing raw data from the input and translating them into a form more
  friendly to the system.

- implement the actual algorithm

- preparation of the data for the output

*** The Outputs Created by the System (Hardware-Level)

As with the input channel, there are similar major parameters for an output chanenl:

- the channel's data path width

- data transfer speed.

- accompanying control information

data ports, status ports and control ports are also of great importance for output.
*** Revision

The first version of the specification may not be the last. The design step and
the implementation step may reveal certain functions cannot be performed given
the conditions. It is necessary to modify the specification so that the
conditions are changed or the offending functions are modified.

** Program Design (How-To-Do)

Taking the specification and detailing the steps to implement the specification
A simple description should be available for each individual part of the system.
For a large system, break the specification into a large number of much smaller modules.

*** Considerations

- *Expansion*: the program should have builtin expansion facilities: e.g. system
  subroutines, expandable tables and lists of data, a convenient,
  well-documented method for adding more functions to the system, and data
  structures that are reasonably flexible.

- *Modules*: the interaction and the interfaces between modules.

- *Alternative Approaches*: there are multiple approaches to the design. In some
  cases, the limitations may not be revealed until later during implementation.
  It is necessary to consider alternatives during design in case of future
  impediment or for a more efficient solution.

** Implementation

Actual coding, debugging and integrating.

*** Coding

- use subroutines.

- documentation

- ensure the code handles errors, special cases, boundary cases, trivial cases.

*** Debugging and Integration

Removing errors from the code and then integrating debugged modules into a final
working system. Debugging executes the program in real hardware or a simulator, rather than
mental desk checking.

- Debug commonly used or system subroutines.

- Debug each area of the specification individually.

- Individual modules are combined into a subsystem and then debugged as a
  subsystem. As each subsystem is debugged, it can then be combined with other
  subsystems until the final system is debugged. During the integration phase,
  ensure the interface between modules and subsystems is handled correctly.

** Testing

Introducing special sets of data and verifying that the correct results are produced.
Testing is often neglected due to time consumption and it is not a well
understood art.

- enter three basic types of data:
  + typical normal data
  + a series of boundary conditions that exercise the system's ability to
    perform decisions correctly
  + a random selection of both legitimate and illegitimate data

- input speed:
  + typical rate
  + fastest rate at which the system is supposed to function
  + a random selection of data rates

** Documentation

- program documentation: how the code works, module by module and sometimes why
  the code works the it does.

- System guide
  + the program's design
  + development guide
  + external interface: inputs and outputs, protocols; external consumers;
    external data suppliers

- user guide: how to use and how to interface with the system

** Maintenance

Altering the program to accommodate new equipment or new processing
requirements and keeping the program functioning in a changing environment.

Hardware parts, OS platforms may change. The system is supposed adapt and expand
and these scenarios should be taken into consideration during program design and
implementation stages.

* Architecture
  :PROPERTIES:
  :CUSTOM_ID: architecture
  :END:

** Registers

*** General-Purpose Registers

- Accumulator register =AX=: Used in arithmetic operations. However, this does
  not mean addition or any arithmetic operations uses =AX= as the only destination.

- Counter register =CX=: Used in shift/rotate instructions and loops.

- Data register =DX=: Used in arithmetic operations and I/O operations.

- Base register =BX=. Used as a pointer to data (located in segment register DS, when in segmented mode).

*** Stack Pointer

- Stack Pointer register =SP=: Pointer to the top of the stack.

- Stack Base Pointer register =BP=: Used to point to the base of the stack.

Stack pointers are used in combination with =SS= to provide 20-bit address space.

*** Index Pointer

- Source Index register =SI=: Used as a pointer to a source in stream operations.

- Destination Index register =DI=: Used as a pointer to a destination in stream operations.

The order is same as what is used in a push-to-stack operation.

*** Segment Registers

Six Segment Registers:

- Stack Segment =SS=: Pointer to the stack.

- Code Segment =CS=: Pointer to the code.

- Data Segment =DS=: Pointer to the data.

- Extra Segment =ES=: Pointer to extra data ('E' stands for 'Extra').

Additional two segment registers are introduced in 80386

- F Segment =FS=: Pointer to more extra data ('F' comes after 'E').

- G Segment =GS=: Pointer to still more extra data ('G' comes after
  'F').

Values cannot be loaded directly into any segment register; load segment registers via other non-segment register.

In real mode, segment registers were used to addressing a 20-bit address
bus using 16-bit registers. Later, they were used as selectors to
protect memory access.

*** Program Counter

- =IP=: instruction pointer

*** Flags (Status)

The =EFLAGS= is a register used as a collection of boolean bits to store the results of operations and the state of the processors.

- =SF=: sign, the sign of arithmetic or logic operations

- =ZF=: whether the result of an operation is zero

- =CF=: carry, indicating a carry after an 8-bit or 16-bit operation (depending
  on the bitness of the operation)
  + also as overflow status for unsigned operations

- =AF=: auxiliary carry, indicating a carry from D3 to D4 of an operation, used by BCD arithmetic

- =PF=: even parity result of certain operation
  + the parity result depends on the bit-length of the operation.

- =IF=: enable or disable external maskable interrupt  requests

- =TF=: trap, for debugging

- =DF=: direction, used to control the direction of string operations

- =OF=: overflow, set whenever the result of a signed number operation overflows

- =R= and =U=: reserved and undefined

** Memory: Representation, Addressing, Models

20-bit address bus from =0x00000= to =0xFFFFF=
CPU after 8088 can access high memory called *extended memory*, often used for disk caches, RAM disks and print spoolers, which can be configured as *expanded memory* for programs to store data.

Since a CPU register is 16-bit only, allowing only 64KB address (/segment/).
To access the memory in a fine
granular manner, the /offset register/ is added to the multiplied result,
normally written as =segment:offset=.
Unlike later IA-32 or AMD64, where a single register is enough to access the
entire memory space, on 16-bit 8086, a pointer value has to be represented by
a segment register plus an offset in another register or an immediate number
offset. There is nothing special about segment registers except that they are
reserved specifically for pointer representation. As long as one needs to access the memory, segment registers have to be used.

Code is not supposed to be load by the user and so =CS= is not normally changed
by user code. Different memory access instructions assume different segment registers.

*** Program Segments

For 8086, segments are not simply program image sections. They are supposed to
be memory
regions accessed via the three segment registers (code =CS=, data =DS= and stack
=SS=). The 8086 can only access these three segments of 64KB at any given time
due to its limited width of registers even its physical address bus is larger.

- /physical address/: the address on the external address bus

- /offset address/: an address within a 64KK range segment range

- /logical address/: a pair of a segment value and an offset address

**** Code Segments

The address of the next instruction is represented by the =CS:IP= register pair, where =CS= is the segment and =IP= is
the offset. The program counter =IP= is never used
by itself. The actual address represented by this pair is =(CS << 4) + IP=. =IP=
increments as instruction is executed.

On modern CPUs, instructions are often prefetched so the program counter only reflects the next instruction to execute but not the next one to fetch. It is a conceptual representation of the CPU's state, not an actual register.

**** Data Segments

Data are supposed to be put in certain memory regions called data segments and
are accessed through the =CS= segment and an offset register (=BX=, =DI= or
=SI=).

#+begin_src asm
mov al, [bx] // relative to CS
#+end_src

**** Extra Segment

Used as an extra /data segment/.

**** Stack Segment

8086 was designed with memory stacks in mind and a special segment register is
reserved for it and related instructions operate with this segment register =SS= and
its offset register =SP=. =SP= points to the last stack location *occupied*.

The stack grows downwward from upper addresses to lower addresses, opposite of =IP=.

=BP= (stack base) is another stack offset that represents the address of the
current stack frame.

*** Point Types

Pointer types are designed by Intel, not purely a programmer's invention.

- /near pointers/: 16-bit offsets within the current segment, determined by the
  value of the current segment register.

- /far pointers/: 32-bit =segment:offset= pairs resolving to 20-bit external
  addresses, the typical representation produced by x86 memory segmentation.

- /huge pointers/: a special types of far pointers that presents a flat memory model. These pointers are normalized so
  that they have the highest possible segment (the most significant 16 bits of
  its physical address) for that address (a pointer may be
  represented by different segment-offset pairs).
  + e.g. =0x15020= is in the segment =0x1502=. Then each such segment (/paragraph/) contains
    only 16 addresses and does not overlapping.

*** Memory Models

Due to 8086's memory segmentation, there are different configurations and usages
for segment registers, resulting in six memory models, listed below

---
| model   | data | code | definitions                                                            | comment                  |
|---------+------+------+------------------------------------------------------------------------+--------------------------|
| tiny    | near | near | CS=DS=SS                                                               | only one segment is used |
| small   | near | near | DS=SS                                                                  |                          |
| medium  | near | far  | DS=SS, multiple code segments                                          |                          |
| compact | far  | near | single code segment, multiple data segments                            |                          |
| large   | far  | far  | multiple code and data segments                                        |                          |
| huge    | huge | far  | multiple code and data segments; single array be longer than a segment |                          |

*** Memory Map: How Memory Space is Used

#+begin_src
┌───────────────────┐ 00000
│                   │
│                   │
│                   │
│                   │
│      RAM          │
│      640K         │
│                   │
│                   │
│                   │
│                   │ 9FFFF
┌───────────────────┐----
│   videos 128K     │ A0000
└───────────────────┘----
│      ROM          │ C0000
│     256K          │
└───────────────────┘ FFFFF
#+end_src

- /conventional memory/: RAM, from 0x0 to 0x9FFFF

- /upper memory/: Videos + ROM, from 0xA0000 to 0xFFFFF

** Addressing Modes

"Addressing" here means the way to access operands, not simply about memory addressing.

- *register*: the use of registers to hold the data to be manipulated

- *immediate*: the operand as a constant, immediately follows the opcode in the
  instruction.
  + Loading segment registers with immediate operands is not allowed.

The following modes manipulate data in the memory through a data pointer. The
first two correspond to the two modes above but as data pointers.

- *direct*: the data pointer is a constant in the instruction.

  #+begin_src asm
mov dl, [2400]   // DS:2400H

mov [2518], al
  #+end_src

- *register indirect*: the data pointer is in a register

#+begin_src asm
mov cl, [si]
mov [di], ah
#+end_src

- *based relative*: Base registers =BX= or =BP= (default with =SS=) along with a displacement value are added as the data pointer

#+begin_src asm
mov cx, [bx]+10 ; DS:BX+10, confusing, seems like plus 10 after dreferencing bx
mov cx, [bx+10] ; DS:BX+10
mov cx, 10[bx]  ; weird, at least not ambiguous
#+end_src

- *indexed relative*: Index registers =DI= or =SI= with a displacement;
  + this mode is essentially the same as based relative but uses index registers.

- *Based indexed*: the above two combined

  #+begin_src asm
mov cl, [bx][di]+8 ; DS:(BX+DI+8)
mov cl, [bx][si]+8 ; DS:(BX+SI+8]
mov cl, [bp][di]+8 ; SS:(BP+DI+8)
mov cl, [bp][si]+8 ; SS:(BP+SI+8)
  #+end_src

*** Segment Override

By default, an offset register are combined with a fixed segment register as the
following

| CS | DS         | ES         | SS     |
|----+------------+------------+--------|
| IP | SI, DI, BX | SI, DI, BX | SP, BP |

However, one may override the default segment by explicitly specify the segment

#+begin_src asm
mov al, es:[bx]
#+end_src
