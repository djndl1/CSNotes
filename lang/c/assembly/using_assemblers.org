#+title: Using Assemblers

* Linking with GCC

use =-no-pie= when linking the object files produced by =yasm= and =nasm=.

* Yasm

#+begin_src shell
yasm [-m x86/amd64] -f elf64/elf32/win32/win64 -g dwarf2 [-l name.lst] name.asm
#+end_src

* Nasm

#+begin_src shell
nasm -f bin/elfx32/elf64/win32/win64/ -g -F elf32/elf64/elfx32/win32/win64
#+end_src

- listing file =-l list_file.lst=, a file where addresses and generated code are listed on the left and the actual expanded source code on the right.

- include file search directories =-i=xs

- define and undefine a macro =-d=, =-u=

- preprocess only =-E=

- Optimization:
  - =-O1=, =-Ox= (recommended and the default), =-Ov=

- Warning:, =-w= enable certain infrequent warnings,
  + =-w+error=, =-Werror=: treat warnings as errors.

** Use GDB on Windows With NASM

Assemble the code into ELF with DWARF debug info and use GCC/LD to link it.

** NASM Language

#+begin_src asm
label:  instruction operands    ; comment
#+end_src

*** Pseudo-Instructions

Not actual x86 instructions but for programming sake.

- =Dx=: =DB=, =DW=, =DD=, =DQ=, =DT= (ten bytes), =DO= (octoword), =DY= (YMM register wide), =DZ= (ZMM register wide)
  + MASM =Dx ?= and =DUP= syntax are supported

- =RESB=, =RESW=, =RESD=, =RESQ=, =REST=, =RESTO=, =RESY=, =RESZ=: declare unintialized storage space.

- =INCBIN=: include binary data file.

- =EQU=: defines constants with labels.

#+begin_src asm
messsage    db  `hello world`
msglen      equ $-message
#+end_src

- =TIMES=: causes the instruction to be assembled multiple times, an equivalent to the =DUP= syntax.

#+begin_src asm
zerobuf:  times 64 db 0
times 100 movsb
#+end_src

**** Critical Expressions

Epxressions revolved on the first pass, through which the size of the assembled code and data is determined so that the addresses of all symbols can be resolved.

*** Constant Literal

- Suffixes: =H=/=X= (hexademcimal), =D=/=T= (decimal), =Q=/=O= (octal), =B=/=Y= (binary); Prefixes: =0x=/=0h= (hex), =0d=/=0t= (decimal), =0o=, =0q= (octal), =0b=, =0y= (binary)

- Character string: single or double quotes for verbatim strings; =``= backquoted strings support C-style escapes for special characters.

- Character Contansts: ASCII character to represent a byte number, up to 8 such characters, arranged in little-endian order.

#+begin_src asm
mov  eax, 'abcd'
#+end_src

- unicode string operator: =__?utf16?__=, =__?utf16le?__=, =__?utf16be?__=, =__?utf32?__=, =__?utf32le?==, =__?utf32be?__= accepts UTF-8 strings and outputs as little-endian Unicode strings.

- floating-point: =__?floatN?__= (N = 8(minifloat)/16/32/64/80m/80e/128l/128h) ooperators used to produce representations of a specific floating-point number as an integer, =__?bfloat16?__=; =1.222_22_22=, =1.22222=, =k1e+4000= or C99-style hexadecimal floating-point: =0x=; =__?Infinity?__=, =__?QNaN?__=, =__?SNaN?__=.

#+begin_src asm
mov  rax, _?float64?__(3.14)
mov  rax, 0x400921fb...
#+end_src

*** Effective Address

- Nasm is capable of doing algrbra on illegal syntax like =[ebx*5]=, =[label1*2 - label2]=.

- =[WORD/DWORD/BYTE/NOSPLIT eax + 3]= to force offset width.

- Absolute address is generated in 64-bit mode by default.
  The =REL= keyword makes it PC-relative, or even more by putting =default rel= at the beginning of the file.

*** Expressions

- =$=: the assembly position at the beginning of the line; =$$= the beginning of the section.

- C-style conditional operator, =||=, =^^= (xor), =&&=; comparison operators; and even =<=>= spaceship; =|=, =^=, =&=; =<<=, =>>=, =<<<=, =>>>= (signed shift)

- =+=, =-=, =/=, =//= (signed division), =%=, =%%= (signed modulo)

- =-=, =+=, =~=, =!=

- =SEG=: the segment address of its operand

*** Local Labels

- =.labelname=: a local label associated with the previous non-local one. Also accessible out of its parent non-local label by using syntax like =NonLocalLabel.LocalLabel=

- =..@= special label that does not interfere with the normal local-label mechanism.

- =..symbol=: special symbols.

** Directives

- =BITS 16/32/64=: mostly unnecessary since the output format pretty much determines the architecture.

- =DEFAULT REL/ABS=: RIP-relative addressing

- =SECTION/SEGMENT=

- =EXTERM=: import symbols from other modules.

- =GLOBAL=: exporting symnbols to other modules

- =COMMON=: like a global variable declared in the uninitialized data section, but at link time, these common variables will be merged.

- =STATIC=: file-scoped local symbol.

- =G|LPREFIX=, =G|LPOSTFIX=: mangling symbols to fit specific API conventions.

** Output Formats

*** ELF

**** Position-Independent Code

- =WRT= with
  + =..gotpc=
  + =..gotoff=
  + =..got=
  + =..plt=: the linker build a procedure linkage table entry for the symbol and the reference goes to the address of the PLT entry.
  + =..sym=

** AMD64

- The CPU Supports RIP-relative addressing directly with =REL= or =DEFAULT REL=

- The stack is required to be 16-byte aligned at the entry to a function on most platforms.

- Immediates are 32-bit except =MOV reg64, imm64=.

- =MOV= can reference a symbol in the entire 64-bit address space while =LEA= only wihtin 2GB of the instruction itself.


** ndisasm

#+begin_src shell
ndisasm -b {16|32|64} filename
#+end_src

* Debugging

Writing programs back then requires putting much more effort into writing
correct programs (even on paper by pencil), rather than removing bugs from incorrect programs, partly due
to terrible tools.

** [[https://learn.microsoft.com/en-us/previous-versions/tn-archive/cc722863(v=technet.10)][DOS Debug]]

Debug may act as an assembler, disassembler or hexdump program.


One great feature of =debug= is JIT of assembly code. The user may write
assembly into a memory region and let debug run it.

*** Enhancement

The original =Debug= supports only 8086 opcodes and 16-bit registers. The
FreeDOS version ([[https://github.com/Baron-von-Riedesel/DOS-debug/][Debug/X]]) is an enhanced clone of MS-Debug with enhanced
features:

- supports instruction sets up to the Pentium Pro (including x87 FPU), with partial support for MMX.
  + and of course 32-bit registers.

- =Debug=: the clone version

- =DebugX=, an extended version that debugs both real-mode and protected-mode (DPMI) DOS programs

*** Behavior

Registers are represented by a few variables. Upon debugging or execution, these
variables are copied into actual registers. Execution will start at the current
value of =CS:IP=.

On program startup, =debug= initializes register variables:

- =AX=, =DX=, =SP=, =SI=, =DI= are set to 0

- (program info) If a target program is loaded =BX=, =CX= are set to the size of the program or
  file
  + otherwise set to 0.

- Segment registers, =SP=, =IP= are set to values appropriate for the loaded
  program.
  + Otherwise the segment registers are set to the segment address of the are of
    memory that =debug= uses to store the output from the Assemble command; =IP=
    set to =100h=, =SP= to =FFFEh=

- the high-words of 32-bit registers are initialized to zero.

*** Commands

A "range" parameter denotes a region of memory, eithere as a =start end= address
pair of a =start L bytecount= pair.

- =-= indicates real mode; =#= protected mode.

**** Load/Write Files

- =N filename= (name): set up the filename to be loaded by the =L= (load) command

- =L [addr]= (load): load the named file
  + by default loaded at =CS:100= except EXE files, which are determined by
    the file header.

- =DEBUG filename=

- =W [addr or 100h by default]= (write): write code to the setup filename.
  + EXE file output is not supported.
  + this command may accept drive and sector numbers, which is not very ideal
    for high level filesystem manipulation.

**** Registers

- =R [register_name register_value]=: read/write registers
  + =F= is the flag register, to set a flag, use =R F flag_name= or =R FL word= altogether.

- =RX=: 8086/80386 register display mode switch

- =RN=: display FPU register status

- =RM=: display MMX registers from low to high

**** Assembly/Unassembly

- =A address=: input assembly instructions starting at the specified address
  + the default address is =100h=

- =U start end/L byte_count=: disassembly memory block from =start= to =end=.
  + =DB=, =DW=, =DD= are pseudoinstructions that represent data.
  + =ORG= sets the starting address for instructions.

**** Execution

- ~G =start stop~: execute the instructions between the two addresses; or without
  the boundaries, start at =CS:IP= until a breakpoint =INT 3= is encountered.
  + up to 10 stop addresses are allowed, at which the execution will be stopped.

- =T [=start] [instruction_count]= (trace): execute and display registers after
  each instruction.
  + =TM 0/1=: trace execution (single-step execution)

- =P [=start] [instruction_count]= (proceed): similar to trace, but executes a
  =REP= string operation, a =LOOP= instruction, a =CALL=, an interrupt
  as if it were a single instruction.

The output of =R=, =P=, =T=, aside from the current register variables, shows
the next instruction, and possibly the memory operand  including the content used by that instruction

**** Memory Access

- =F start end/L byte_count bytes=): fill memory with data (inclusive)

- =D start end/L byte_count= (dump): examine the contents of memory
  + the segment register is needed in the end address.

- =DM=: display the memory control block chain (DOS term for freelist)
  + format: =MCB_segment_address 4D/5A owner size owner_name=

- =DL= (DebugX): display local descriptors

- =DX= (Debug/X): display extended memory (the full range of memory of physical address)
  + for DOS emulators, the memory displayed is not physical address and may
    trigger a crash.

- =E address data_list= (examine or enter): enter a list of data into a certain
  portion of memory.
  + by default in the =DS= segment
  + =data_list= may be hex data or ='string'=
  + without a data list, each byte is printed and waiting for possible writing.

- =M [start] [end/L byte_count] [dest]= (move): move (copy) a region of data to the destination.

- =C [start] [end/L byte_count] [compare_addr]= (compare): compare a memory region with
  another region.

- =S [start] [end/L byte_count] [data_list/string]= (search): search for a specific data value in the region

**** Interrupts

- =DI [range]=: display inerrupt vectors

**** I/O

- =I/IW/ID port=: reads a byte/word/dword from a port

- =O/OW/OD port byte/word/dword=: writes a byte/word/dword to a port

**** Other

- =H= computes the sum and difference of two hex numbers.
  + I have python for that.

- =M 0/1/2/3/4/5/6=: set CPU type, from 8086/8088 to P6.

- =MC [N/2]=: enable, disable and set FPU mode.

- =Q=: quit the debugger
  + =QQ=: forceful quit

*** Breakpoints

- An =int 3= in code

- Use hardware debug register (386)

* Dumpers & Disassemblers

** =wdump= from OpenWatcom

At least for DOS 16-bit code, this is the best dumper.

The header occupies at least 0x1B, already two paragraphs, with the length of
the relocation table and some zero fillers, the EXE data probably starts at 0x30
or 0x40. If there is some dwarf debug info, =wdump -Da= and find the
=DW_AT_low_pc= of the symbol, add that value to the start offset. The most
straightforward way is to =wdump= and find "size of header in paragraphs",
multiply the value by =0x10= should be the start address of EXE data.

To find the data segment, note that first two instructions sets up the data
segment register: the value moved into =DS= is the segment paragraph number.
Multiply the value by =0x10= and add the result to the start address of the EXE
data, the result is the file offset of data segment.

** [[https://github.com/zfigura/semblance][semblance]]

Probably the best FOSS x86 disassembler (but crashes too often).

It understands NE, MZ and PE file formats and supports disassembly and can dump all sections.

The source code compiles on ARM, but fails to run.

** x86dis (For x86 Obviously)

It understands some instructions and follows them (e.g. =jmp=) during
disassembling =-e=. Both Intel syntax and GAS syntax are supported.

No file format parsing is supported.

** ndisasm (Comes with NASM)

- Both Intel syntax and GAS syntax are supported

- =-s sync-point= Due to the variable-length nature of x86 instructions, a disassembler must
  start at a proper address to correctly decode the byte stream.
