#+title: Programming Pitfalls

* Writing an Incorrect Section Name

=.section data= compiles but the data is not in the =.data= section.
It's *=.data=* not =data=. Both COFF (and PE) and ELF use the =.text= section
even some assemblers accept =.code=. Using incorrect section names results
unexpected results (link time failure or run-time misbehavior).

* Assembly is Limited by Instruction Encoding

In RISC-V you cannot have number of arbitrary length as an immediate number.
In AMD64, =push= cannot push a 64-bit immediate.

* Be Careful of Data Size on Memory

When loading data from memory, be sure that the correct size specifier and
register names are used (especially on x86).

* Remember to Save Callee-Saved Registers in a Function's Prologue

If they are used in the function, save them.
If not, leave them be, assuming any called functions will preserve them as well.

* Do Not Destroy Flag Bits Carelessly

e.g. Do not use =add= immediately before =adc=, use =inc= instead.

* NULL Pointer May Be Occupied By Valid Data

On DOS for a near pointer, a zero value is the beginning of a segment and may
not be invalid. Do not save any valid data at a segment beginning (use =org=).
Reserve that for =NULL=
