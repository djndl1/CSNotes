#+title: Programming Pitfalls

* Writing an Incorrect Section Name

=.section data= compiles but the data is not in the =.data= section.
It's *=.data=* not =data=. Both COFF (and PE) and ELF use the =.text= section
even some assemblers accept =.code=. Using incorrect section names results
unexpected results (link time failure or run-time misbehavior).

* Assembly is Limited by Instruction Encoding

In RISC-V you cannot have number of arbitrary length as an immediate number.
In AMD64, =push= cannot push a 64-bit immediate.

* Be Careful of Data Size on Memory

When loading data from memory, be sure that the correct size specifier and
register names are used (especially on x86).

* Remember to Save Callee-Saved Registers in a Function's Prologue

If they are used in the function, save them.
If not, leave them be, assuming any called functions will preserve them as well.
Callee-saved does not mean the callee should save every register.

* Do Not Destroy Flag Bits Carelessly

e.g. Do not use =add= immediately before =adc=, use =inc= instead.

* NULL Pointer May Be Occupied By Valid Data

On DOS for a near pointer, a zero value is the beginning of a segment and may
not be invalid. Do not save any valid data at a segment beginning (use =org=).
Reserve that for =NULL=.

Not only should =0= be protected, the whole region might be protected. Then
again, DOS has no memory protection.
[[https://www.state-machine.com/null-pointer-protection-with-arm-cortex-m-mpu][Other systems]] may have mechanism to protect this region.

* SysV Intel 386 requires the parameter block aligns the stack at 16-byte boundary.

#+begin_src c
int main()
{
    putchar('A');
    return 0;
}
#+end_src

The =main= functions uses a somewhat different pair prolog/epilog to align the
initial address at 16-byte boundary. It finds the real stack base, aligns the
stack pointer on a 16-byte boundary and does a normal prelog and then pushes the
real stack base

#+begin_src asm
/*
old_stack_top <- ecx after the first instruction
return_address <- esp on entry
...
...
...
 ---- <- 16-byte boundary
return_address <- saved via ecx
old_stack_base <- ebp
old_stack_top_address
empty_padding

,*/
main:
        lea     ecx, [esp+4]      # find last stack's top
        and     esp, -16          # align at 16 bytes
        push    DWORD PTR [ecx-4] # -4, save ret address again, not really used but for the sake of stack integrity.

        push    ebp               # -4
        mov     ebp, esp

        push    ecx               # -4
        sub     esp, 4            # -4, now 16 bytes again

        # one parameter, but 16 bytes on the stack for alignment
        sub     esp, 12
        push    65
        call    putchar
        add     esp, 16

        mov     eax, 0 # return 0

        mov     ecx, DWORD PTR [ebp-4] # retrieve the last stack's top
        leave   # shrink the esp by two slots and restore esp
        lea     esp, [ecx-4] # the real stack base is way upper
        ret
#+end_src

* For Multiword argument on a little-endian machine, the MS word should be pushed first
