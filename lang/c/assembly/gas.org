#+title: The GAS Assembly Language

Primarily intended to assemble the output of GCC for use by the linker =ld= and
thus includes features that may seem weird to human programmers (e.g. logical
filename directives to indicate error in the original files).

* Syntax

Assembly programs contain /comments/, /labels/, /assembly instructions/ and
/assembly directives/ (commands used to coordinate the assembling process).

A program line is either =[label] [instruction]= or =[label] [directive]=. Only
one label or one directive is allowed per line. A label has to precede an
instruction or a directive. All elements of a single instruction must be
expressed in the same line.

** Comments

Line comment characters are ISA-dependent (=//= for Aarch64, =@= for ARM, =#=
for x86, RISC-V)
Comment-line (the whole line is a comment): =#= begins a comment for ARM,
Aarch64, x86.

General multi-line comment is the C-style =/* */=

** Instructions

Not necessarily one-to-one mapped to machine instructions. A pseudo-instruction
does not have a corresponding machine instruction on the ISA but can be
translated into  one or more to achieve the same effect.

** Values

C style literals. A character may be written as a single quote followed by that
character ='c=.

Binary integers are supported: =0b1011=.

** Symbols

Labels are automatically converted into symbols by =as=. One may use =.set= to
explicitly create symbols. Symbol names are limited to letters, digits and =$= (machine-specific),
=.=, =_= and multibyte characters.

** Labels

Symbolic labels are identifiers followed by =:= and are placed into the symbol
table. Numeric labels (=<Number>:=) are for local use and are not included in
the symbol table and thus can be repeatedly defined in the same assembly
program. A reference to a numeric label contains a suffix =b= (before) or =f=
(after) to indicate its position relative to the reference.

** Directives

Used to control the assembler.

*** Add Data Values

=.byte=, =.half=, =.word=, =.dword= add data (comma separated expressions) to
the active section.

=.string= or =.asciz= (null terminated strings), =.ascii= (string without NULL
character) add strings to the active section.

Note that these directives will not align the data at a proper boundary. Use
=.align= for that.

*** =.section=

Changes the active section. =.segment= is not supported by GAS.
A section is the basic unit of linking. Sections of the same category are linked together.
The linker also assigns runtime addresses to sections (*relocation*).
The linker deals with named section, text section, data section, 
bss section, absolute section (always relocated to runtime address 0),
undefined section.

To merge data or text in different parts in an assembly source so that they are near each other, 
they can be placed under the same subsection. By default everything is placed under subsection 0 
unless explicitly specified otherwise with =.subsection=, =.text= or =.data=.

=.rodata= (read-only data), =.data= (initialized global data), =.text=
(instructions), =.bss= (uninitialized global variables).

=.text [subsection]=, =.data [subsection]=, =.bss [subsection]= are also used as directives to add subsections.

=.bss= sections have only symbols, =.skip size [fill_byte_value]= is required to
allocate memory space. =.lcomm= and =.comm= may also be used to declare common variables in bss sections.

#+begin_src asm
.section .bss
x:  .skip 4 0 # allocate 4 bytes with the value initialized to 0
#+end_src

*** =.set=, =.equ=

Sets the value of a symbol to an constant expression. By default it creates a local
symbol if none.

*** =.globl=, =.global=

Makes the symbol visible to the linker. A C's =extern= declaration.

*** =.align=

Instructions and data are not automatically aligned. The programmer is
responsible for keeping data and instructions aligned. The compiler usually
inserts a =.align N= (multiple of $2^{N}$) directive before routine labels to ensure the routine
instructions start on aligned addresses.

* Assembling Process

- Location Counter: An internal assembler counter that keeps track of the
  address of the next available memory position when a program is being
  assembled.
  + Each section has its own location counter.

The location counter of each section is initialized. The assembler scans the
source, adds a symbol to the symbol table when encountering a label, increment
the location counter of the current section while translating instructions.

=as= has basically none preprocessing capability (=.include= only). Name the
source file suffixed with =.S= and feed it into =gcc= to get C-style
preprocessing.




* How to Use =as=

=as= accepts more than one files concatenated.
Use =-D= to enable debugging. =-I= to add an =.include= search path. =--MD= to
generate a dependency file for use with =make=; =-o= output file name.
