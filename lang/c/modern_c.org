#+title: Modern C

Just like modern C++, Modern C is not C in the latest language standard, but a
set of encouraged conventions and practices that are used in modern C development.

- Declarative and Functional

- Value-Oriented and Less Pointers

- Heavy Zero Initializtion

- Centralized Resource Management

- Allocator-aware

* [[https://queue.acm.org/detail.cfm?id=3212479][C Is Not A Low-Level Language Your Computer is not a fast PDP-11]]

C's abstract machine maps poorly to the underlying physical machine.
C's model was intended to allow implementation on a variety of targets.
For example, pointers with the same value bitwise may not even point to the
same chunk of memory to allow segmented architectures and even GC virtual
machines.

** Serialized Execution Model

C code provides a mostly serial abstract machine until C11.
Modern instruction-level parallelism (pipeline, speculative prediction, SIMD) offers performance boost without changing
the assumption of the serial abstraction machine. Modern computer systems have
even [[../../security/spectre_meltdown.org][security vulnerabilities]] due to instruction-level parallelism.

** Flat Memory

Modern computers have at least three levels of cache in between registers and
main memory to hide latency. Efficient use of the cache is one of the most
important ways of making code run quickly on a modern processor. However C hides
this respect.

** Optimization

There is no simple translation from C to machine code and using C in itself does no imply
performance. A few guarantees and assumptions of C makes certain optimization
techniques difficult.

For example, if one interation in a loop is independent from another, the
optimizer can vectorize them. C's syntax provides little information about this.

C adds padding at the end of a structure. A copy of a =struct= must retain its
padding. A large portion of runtime copying is just for copying the padding.

* Code Style Used by the Modern C Book


- bind modifers, qualifiers and attributes to the left: they are placed on the right.
  + =char* var= not =char *var=

- no more continued declarations: one variable in a declaration.

- array notatiion for pointer parameters that cannot be null 
  to emphasize the constraint and nature of the pointer.

- function notation for function pointer parameters for not-null function pointers.

- define variables as close to their first use to avoid uninitialized variables.

- block ={= immediately follows its introducing statement to indicate its purpose and its extent.

- use C23 digit separator ='=.

* Struct Initialization

Designated initialization, nested initialization and compound literals leads API
reforms in C.

* =_Generic= and Overloading

Useful for math functions.

* Macro Use

** =defer=

A scope that upon entering sets up something and tears it down when leaving it.

#+begin_src c
#define CONCAT(a, b) a##b
#define CONCAT2(a, b) CONCAT(a, b)
#define INTERNAL_VAR(v) CONCAT2(v, __LINE__)

// both begin and end are required to be expressions
// function calls, even void functions, are valid expressions.
#define scoped(begin, end) for ( \
        int INTERNAL_VAR(_i_) = (begin, 0);  \
        !INTERNAL_VAR(_i_);                  \
        ((INTERNAL_VAR(_i_)) += 1), end)

bool entered = false;

void begin_func()
{
    entered = true;
}

void end_func()
{
    entered = false;
}

int main(void)
{
    printf("Before enter: Entered %d\n", entered);
    scoped(begin_func(), end_func()) {
        printf("Entered %d\n", entered);
    }
    printf("After entered: Entered %d\n", entered);
}
#+end_src

* Parameters & Return Values

Out parameters are discouraged, use return value with structures.
Value passing rather than pointers are more preferred
and can be used with compound literals.

The reason why structs may be copied into parameters in C are that, unlike C++,
where structs/classes have complex copy semantics including memory allocation, C
structs are copied bit by bit. For a relatively small structure, they might even
be passed in a register.

Structs may be used as a way to design a function with default parameters as
unspecified struct members are empty initialized.

* Union as a way to give members different styles of name.

#+begin_src c
typedef union _pair {
    struct { float X, Y; };
    struct { float Left, Right; };
    float Elements[2];
} pair;
#+end_src

* Error Handling

Return the result data along with the error in a struct.
The error may be even propagated through multiple function calls without being
checked before the final check.

#+begin_src c
result_t a = read_data();
result_t b = process_data();
result_t c = write_data();

if (c.succeeded) {
    ...
}
#+end_src

* Generic APIs

[[https://github.com/nothings/stb/blob/master/stb_ds.h][stb_ds.h]] and [[https://github.com/stclib/STC][STC]] offer examples of mixing macros and functions.

* Single-Header Library

A header of the interface and the implementation separated by a macro definition.

* Writing Libraries

- Avoid allocations and request allocators or buffers from the user.

- Try to make libraries freehosted.

#+begin_src c
typedef struct allocator_t {
    void *user_data; // some additional data that may be used by the allocator
    void *(*proc)(allocator_t *this_allocator, size_t amount_to_alloc, void *ptr_to_free);
} allocator_t;

#+end_src

* Memory Management

- Make an temporary allocator and use it to create a few objects and free the
  allocator to release the memory altogether, basically a simple GC.

* Avoid Libc

#+begin_quote
The C stdlib is essentially an SDK for very simple 70's UNIX-style command line
tools, but operating systems have moved on, while the C standard library is
unfortunately stuck in the past.
#+end_quote

- Terrible and confusing API design that often causes misunderstanding and misuse.
    Only a few like =stdint.h=, =memmove=, =memcpy=, =memset=, =math.h= are useful.

- Character functions are defined for use with =fgetc=. They accepts =int=, which
in unintuitive, and the domain is =unsigned character= and =EOF=: they do not
accept most values. Use them with =param & 0xFF= to avoid undefined behavior.
Still, the behavior is locale-specific.
  + multibyte and wide string functions are locale specific and thus unreliable

- Null-terminated strings are slow. String handling functions in libc are badly
designed: =strtok= is not only non-reentrant, it even modifies the input string
by replacing the first character of the delimiter with a ='\0'=. =strcpy= and
=strcat= are unsafe; =strncat= and =strncpy= have confusing semantics about the
terminating =null= and the specified size is the source's length, which should
have been the destination's length to prevent out-of-bound access.

- =errno= is global (hopefully thread-local).

- signals: limited and useless

- C11 threads: badly designed with limited functionality

- I/O streams distinguishes between text and binary. Text streams translate
  input and output and have terrible performance. STDIO are buffered. STDIO are
  usually protected by a mutex. STDIO has terrible support for Unicode. Seek
  offsets are limited to =long=.
  + On Windows, standard C programs interact with the ANSI Win32 API (through
    MSVCRT's implementation), completely ignorant of Unicode.

- Numeric conversion functions are locale-dependent.

- the functions themselves are fine; their use is too granular.

** Alternatives

- GLib

- libcork

- Apache Portable Runtime

- [[https://github.com/rustyrussell/ccan/][CCAN]]

* String Handling

Differentiate owning strings (=StringBuilder=) and non-owning strings (=string=)

* Workaround Weakness of Typedef

#+begin_src c
typedef struct { int val; } meter_t; // instead of int for type safety
typedef struct { int val; } hour_t;
#+end_src

* Pointers Are =Unsafe=

#+begin_quote
The presence of pointers in C code and in structs always requires special
attention and mental effort to read and understand all the code ‘tainted’ by
those pointers.
#+end_quote

