#+title: Posix Regex

The syntax of regular expressions varies across application programs.

* Matching Mechanism

- If a regex could match more than one substring of a given string, it matches the first.

- If a regex could match more than one substring starting at a given position,
  it matches the longest possible substring (greed).

- Match lengths are measured in characters.

- a null string is considered than no match at all.

* Components

- *Anchors* :: position of the pattern in relation to a line of text

- *Character sets* :: used to match one or more characters in a single position

- *Modifiers* :: repeated count of a character set

* POSIX Extended Regular Expression (Modern)

Used by =awk=

- *atom*: indivisible basic unit:
  + a regular expresison enclosed in =()= (group)
  + an empty set of =()= (matching the null string) 
  + a *bracket expression* in =[]=
  + =.= (any single character)
  + =^=, =$=, =\= followed by a special character
  + a single regular character.
  + ={= followed by a non-digit character is a normal character.

- *piece*: an *atom* followed by a single =*=, =+=, =?= or *bound* (={m[,[n]]}=)

- *branch*: one or more concatenated pieces.  
  A BRE regex consists of one or more nonempty *branches* separated by =|=, 
  which matches anythign that matches one of the branches.
  + =|= has the lowest precedence: the two operands can be as long as they
    can.

*** Bracket Expressions (Groups of Characters Within Brackets)

A bracket expression matches any single character enclosed in its =[]=.

- =]= at the first position is literal

- =-= at the first/last position is literal

- Most special characters lose their meanings inside =[]=.

Beside literal characters, bracket expressions comprise of

- *POSIX character classes* =[:CharacterClass:]=.
  + =[:alnum:]=, =[:alpha:]=, =[:blank:]=, =[:cntrl:]=, =[:digit:]=,
    =[:graph:]=, =[:lower:]=, =[:print:]=, =[:punct:]=, =[:space:]=,
    =[:upper:]=, =[:xdigit:]=
  + character classes are not used alone but always in a bracket expression.

- *Collating symbols*, *Collating element* =[.CollatingSymbol.]= a
  single character or a multicharacter sequence treated as a unit while sorting.
  + note the difference from subexpressions. Collating elements are defined by
    the locale and treated as a unit only when sorting. It is a syntatic form to
    represent certain locale-specific character sequences.

- *Equivalence classes* ~[\=, \=]~: a set of characters that should be
  considered equivalent to the one enclosed inside.

All the three types of components have their own brackets in addition to the
outer pair of brackets.

* POSIX Basic Regular Expression (Legacy)

Used by =grep=, =sed= by default, although both should now support ERE. Meant
to unify the regex syntax used by applications that support existing traditional
simple regular expressions on Unix.

** Difference From BRE

- Characters that supposed to represent bounds ={}=, bracket expressions =[]=,
  subexpressions =()= need to be prefixed by =\= to have special meanings.

- =|=, =+=, =?= are regular characters. Use bounds as the alternative.

- =^=, =$= are regular chracters unless positioned at the beginning/end of a regex.

- =*= as an modifier is supposed but is regular if positioned at the beginning of a regex or a subexpression.

- BRE supports backreferences as an atom.

- =\( \)=: saves the pattern enclosed between into a special holding space or a hold buffer.

#+begin_src
:%s/\(abcd\)\1/alphabet-soup/
# changes `abcdabcd` into `alphbaet-soup`
#+end_src

- =\< \>=: matches characters at the beginning or at the end of a word

* Emacs Regexp

Mostly based on POSIX basic regex but extended.

- =\w= (word constituent), =\W= (non-word constituent), =\b= (the beginning or
  the end of a word), =\B= (empty string that is not the two ends of a word), =\<=, =\>=; =\`=, =\'= (start/end of the buffer or string),
  ~\=~ (empty string at point), =\_<=, =\_>= (matches the beginning/end of
  symbols than words)

- =\|= for alternation

- =\{ ... \}= for bounds

- =\( ... \)= for subexpressions
  + =\(?: ... \)= unnumbered subexpression, may not be backreferenced.

- supports backreferences.

- =\sc=, =\s-=, =\s= match characters by syntax using mode-specific syntax
  table. =\s-= (whitespace characters)

- =\cC=, =\CC= categories =describe-categories=

* Vim Regex

Supposedly derives from POSIX BRE but with much more features.

- =\+=, not =+=

- =\( ... \)= not =(...)=

- ~x\=~, not ~x?~

- =x\{n,m}=, not =x{n, m}=

See =:h perl-patterns= for difference from perlregex.

* Shell Pattern Matching

- =*= :: zero or more characters

- =?= :: matches any single character

- =[]= :: a character list or character range
  + POSIX character classes, equivalence classes, collating elements are supported

** =extglob=

Available in bash and ksh.

- =?(pattern-list)= :: zero or one occurrence of the pattern

- =*(pattern-list)= :: zero or more

- =+(pattern-list)= :: one or more

- =@(pattern-list)= :: one

- =!(pattern-list)= :: not one
