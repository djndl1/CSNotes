#+title: Awk

A sequence of patterns and actions that tell what to look for in the input data
and what to do when it's found. A set of files arae searched for lines matched by
any of the patterns and the corresponding action is performed on a matching line.

Awk can print fields, select input and transform data.

* Basics

The whole process is a loop over every line, a pattern is a condition that
filters a line and the pairing action operates on the matching line. =BEGIN=
and =END= runs before the first line and at the last line.

#+begin_src awk
# conceptual process
BEGIN_ACTION
while (has_line) {
      if (match(pattern)) {
            action
      }
      if (last_line) {
            END_ACTION
      }
}
#+end_src

- Pattern-action statement: =pattern { action }=. Each awk program is a sequence of one or more pattern-action statements.
  + a pattern without an action prints all lines matching the pattern
  + actions are separated by newlines or semicolons

  #+begin_src shell
// quick start
// one liner
awk 'program text' input_file1 input_file2
// program file
awk -f progfile input_files... 
// without an input file, stdin is read
  #+end_src

  #+begin_src awk
  pattern { action }
  pattern { action }

ip a | awk '$1 == "inet" { print $2} '
awk -f programFile inputfiless...
  #+end_src

- =$1=, =$2= ... fields; =$0= the entire line; =NF=: the number of fields; 
  =$NF=: the last field. Any expression can be used after =$= to denote a field number; 
  =NR=: current line number (number of record)

#+begin_src awk
# much like Python's print
{ print } # or
{ print $0 }
#+end_src

- =BEGIN= matches before the first line of the first input file; =END= matches after the last line of the last file;
  Used to do anything before/after the actual matching.

- declaration is not necessary for variables

  #+begin_src awk
{ pay += $2 * $3 }; END { printf "total pay %.2f\n", pay } # pay is defined the first time it's used and is used afterwards
  #+end_src

- string are concatenated by a blank between them, similar to C's string
  literal concatenation.

- NR retains its value in an =END= action, =$0= does not (but =gawk= and =mawk= does preserve =$0=)

#+begin_src awk
# show the last line
{ last = $0 }; END { print last } # END { print $0 } works for some implementation
#+end_src

- C-style =if=-=else=, =while= and =for= clauses are available.

- Arrays are more powerful than C arrays, with automatic resizing.

#+begin_src awk
{ line[NR] = $0 }
END {
    for (i = NR; i > 0; i--) {
        print line[i]
    }
}
#+end_src

** Some Oneliners

#+begin_src awk
END {print NR } # print line count

NR = 10 # print the tenth line

# print the count of lines containing "Beth"
/Beth/ { nlines += 1 }
END { print nlines }
#+end_src

* Language

- The opening brace of an action must be on the same line as the pattern it accompanies.

- statements can be broken after backslashes, commas.

** Patterns

- =BEGIN=, =END=: a way to gain control for initialization and wrapup.
  + =FS= can be changed at =BEGIN=.

- /expression/: statements are executed at each input line where the expression evaluates to true.

- =/regex/=: lines are matched when they conbtain a string matched by the regex.

- compound pattern: expressions with =&&=, =||=, =!= and parentheses.

- =pattern1, pattern2=: a range pattern that starts from the line matched by =pattern1= to the line matched by =pattenr2= inclusively.

*** Regex Matching

- =/regex/=: matches the input line. In a matching expression, a quoted string 
  can normally be used interchangeably with a regex enclosed in slashes. 
  However, in quoted strings, =\\= is needed to escape a character:
  ="\+"= means =+=, ="\\+"= means =\+=, that is, a literal =+=,
  because one level of protecting backslashes is removed when a quoted string is parsed by awk.

- =expression ~ /regex/=: matches the string value of the expression

- =expression !~ /regex/=: matches if the string value of the expression does not contain a substring matched by the regex.

Gawk uses the POSIX extended regex.

- metacharacters: =\=, =^=, =$=, =.=, =[=, =]=, =|=, =(=, =)=, =*=, =+=, =?=

- =$1 ~ $2= is a useful way to test regexes.

*** Range Pattern

A range pattern matches multiple lines. 

- the first pattern matches first and the range continues until the second
  pattern is matched. The first pattern may then match again.

- If the second pattern is not found, the match goes on.

** Action

- expression:
  + variables: variables may be /user-defined/, /builtin/ or /fields/.
    - builtin: =FNR= (line number of the current file), =NF= 
    (reset when =$0= changes or when a new field is created by assigning to a field variable), 
    =NR= (number of record). =RLENGTH= and =RSSTART= change as a result of =match= call.
    - fields: =$0= to =$NF=. Fields can be assigned to. One may create a new
      field simply by assigning a value to it.
    - Uninitialized variables are created with the numeric value 0 and the string value "". 
      Nonexistent fields and fields that are explicitly null have only the
      string value ""; they are not numeric, but when coerced to numbers they
      acquire the numeric value 0.
  + arithemtic operators: =^=: exponentiation. All arithmetic is done in
    floating point.
  + Strings can act as regex: =$2 ~ mystring=.
  + ~v = e~ and =v= acquire the type of =e=; ~x == y~ the comparison is
    numeric only if both operands are numeric.
    Any field is by default a string but it may also acquire a numeric type
    if it is a valid numeric token.
    
- Arrays are string-subscripted associative arrays. An array element may be deleted with =delete array[subscript]=.
  + Array elements cannot themselves be arrays. Multidimensional arrays are actually associative arrays 
    with keys formed by concatenated subscripts: =array[i, j]= has keys a key
    =i SUBSEP j=, where =SUBSEP= is a builtin variable to separate
    subscripts. Testing for array membership =if((i, j) in arr)= works.
  
- Control flow: all C constructs are supported
  + =for (key in array)= loop is supported.
  + =next=: the next iteration of main input loop
  + =exit=: to the =END= action; exit the program if already within the =END= action.

- user defined function, defined anywhere a pattern-action statement can.
  + scalars are passed by values while arrays are passed by reference.
  + function-local variables are only created through the paramter list (strange design).
    All other parameters are global. To define a local variable, it has be
    added to the parameter list. Fortunately, a function call is not
    required to supply every parameter with an argument.
  + For a function call statement =funcname()= is okay, =funcname ()= is not.

- output
  + =>= and =>>= are used with =print= or =printf= to write into files.
  + =|= pipes are also used with printing functions.
  + files are pipes are identified by their names (file name or pipe command string)  inside a awk program.
  = =close= a file/pipe is necessary if the file is read later.

- multiline record
  + =RS=: record separator, by default =\n=

* Common Operations

** Output

- =print=: similar to Python's =print=

- =printf=: C's =printf=.

** Selection & Filtering

- comparsion ~$2 >= 5~, ~$2 * $2 > 50~, ~$1 == "Susie"~

- regex ~/Susie/~

Match conditoins may be combined with parentheses and logical operators =&&=,
=||=, =!=

** First or Last Item

- ~NR == 1~ for the first line 

- To find the first maching line, add a =exit= in the action to process only
  one line.

- =END= for the last line.

** Aggregation

Use =BEGIN= to initialize variables and =END= to perform postprocessing

#+begin_src awk
# sum matching lines
$3 > 15 { emp = emp + 1 }
END { print emp }
#+end_src

#+begin_src awk
# map and then sum/average
{ pay = pay + $2 * $3 }
END { print pay, pay / NR }

# concatenate strins
{ names = names $1 " " }; 
END { print names }

#+end_src

** Reverse

Save in an array and print in a loop in postprocessing

#+begin_src
{ line[NR] = $0 }
END {
  i = NR
  while (i > 0) {
      print line[i]
      i = i - 1
  }
}
#+end_src

* Data Processing

** Sum numbers of each column

#+begin_src awk
function isnum(n) { return n ~ /^[+-]?[0-9]+\.?[0-9]*$/ }
NF > 0 && maxfld == 0 {
    maxfld = NF
    for (i = 1; i <= NF; i++) {
        numcol[i] = isnum($i)
    }
}
NF > 0 {
    for (i = 1; i  <= NF; i++) {
#        if (numcol[i]) {
            sum[i] += $i
 #       }
    }
}
    END {
        for (i = 1; i <= maxfld; i++) {
            if (numcol[i]) {
                printf("%g", sum[i]);
            } else {
                printf("--")
            }
            printf("%s", i == maxfld ? "\n" : "\t")
        }
    }
#+end_src

** Histogram of Integers

#+begin_src awk
function replicate(n, s, t) {
    while (n-- > 0) {
        t = t s
    }
    return t
}

NF > 0 && minidx == 0 {
    minidx = $1
    maxidx = $1
}

{
    x[int($1)]++
    if ($1 > maxidx) maxidx = int($1)
    if ($1 < minidx) minidx = int($1)

    if (x[$1] > maxcnt) maxcnt = x[$1]
    if (x[$1] < mincnt) mincnt = x[$1]
}

END {
    segment = (maxidx - minidx) / 10
    scale = (maxcnt - mincnt) / 10

    printf("Max %d, Min %d\n", maxidx, minidx)

    for (i = minidx; i <= maxidx; i += segment) {
        cnt = 0
        for (j = int(i); j < i + segment; j++) {
            cnt += x[j]
        }
        printf("%2d - %2d: %d %s\n", i, i + segment - 1, cnt, replicate(cnt / scale, "*"))
    }
    cnt = 0
    for (j = i; j < maxidx ; j++) {
            cnt += x[j]
    }
    if (i < maxidx)
        printf("%2d - %2d: %s\n", i, maxidx, replicate(cnt / scale, "*"))
}

#+end_src

** Numbers and commas

#+begin_src awk
function addcomma(x, num) {
    if (x < 0)
        return "-" addcomma(-x)

    num = sprintf("%.2f", x)
    while (num ~ /[0-9][0-9][0-9][0-9]/) {
        sub(/[0-9][0-9][0-9][,.]/, ",&", num)
    }
    return num
}

function checkcomma(x, num) {
    if (x ~ /^,/ || x ~ /,$/) return 0
    if (x < 0) return checkcomma(-x)

    num = x
    while (num ~ /,[0-9][0-9][0-9]/) {
        sub(/,[0-9][0-9][0-9]/, "", num)
    }

    if (num ~ /^[0-9][0-9][0-9][0-9]/) {
        return 0
    } else {

        return num ~ /^[0-9]{0,3}\.?[0-9]*$/
    }
}
#+end_src

** Format numbers into words

#+begin_src awk
{ "date" | getline date } # read a date string from the date command

function intowords(n) {
    n = int(n)
    if (n >= 1000)
        return intowords(n / 1000) " thousand " intowords(n % 1000)
    if (n >= 100)
        return intowords(n / 100) " hundred " intowords(n % 100)
    if (n >= 20)
        return tens[int(n / 10)] " " intowords(n % 10)
    return nums[n]
}

function initnum() {
    split("one two three four five six seven eight nine " \
        "ten eleven twelve thirteen fourteen fifteen " \
        "sixteen seventeen eighteen nineteen", nums, " ")
    split("ten twenty thirty forty fifty sixty seventy eighty ninety", tens, " ")
}
#+end_src
