#+title: Vim

This note is intended to be read with =vi.org= to introduce basic Vi/Vim editing.

* What's New

Vi is part of POSIX, with little change over the years. Vim extended its feature
set and gained a large community around it. It emphasizes modality and touch
editing but provides features for less experienced users (=evim=, =vimtutor=,
and some third-party tutorials: OpenVim, Vim Adventures).

- Initialization and Customization with scripting and plugins
  + =_vimrc= on Win32.

- Infinite undo.

- GUI features

- Multiwindow Editing

- Autocompletion

- Syntax awareness

- Postprocessing after editing (e.g. cleanups)

- Arbitrary line length up to a C =long= integer.

- Unicode Awareness

- Binary data: no newline after at the EOF.

- Session Context: recent documents, recent edits of recent files, command
  history, previous leaving location.

- Meta-information: four special registers
  + =%=: the current filename
  + =#=: the alternate filename
  + =:= the last shell command
  + =.= the last inserted text

- the black hole register ="_=: the =/dev/null= of vim.

- Transparent editing with compressed files.

- Builtin help: the =:help= intro provides some basic usage before going into
  details.
  + Help topics are tags too: =Ctrl-]= jumps to the tag (help topic),
    =:tselect=, =:tnext=, =:tag= to find further matches.
  + =(l)helpgrep= search all help text files and make a list of matching lines.
  + (Neovim) =gO= shows the outline
  + =:exusage= (show ex commands), =:viusage= (show normal mode commands)
  + to view translated help, add =@lang= to the =:help= command.
  + there is an =index=  help file listing all commands.
  + =:h help-summary= to learn how to help.

- =:go n=, =:n go= :: go to the nth byte in the buffer

- =:message=: a message buffer

* GUI gVim

Separate =.gvimrc= in =$HOME= and local directories are used for gVim only.

* Command line options

- ~-b~: in binary mode

- ~+command~, ~c command~: execute command as an =ex= command

- ~-C~: vi-compatible mode (not fully compatible)

- ~-d~: diff mode

- ~-E~: improved ex mode, with extended regex

- ~-F~ / ~-A~: Farsi or Arabic mode

- ~-M~: turn off the write option

- ~view~: vim in read-only mode

- ~vimdiff~: diff mode

- ~ex~: ex mode, useful in scripts

* Customizing Commands

- =:command= defines a command
  + arguments can be defined and later referenced using keywords (predefined
    variables).

- =:delcommand= deletes a user command.

* Record & Playback

More than key mappign or macro, this records complex command sequences
and replays them to save typing.

- =q<RegisterName>= to start recording, =q= again to stop. =@<RegisterName>=
  to replay the commands. To append commands to a register,
  =q<UppercaseRegisterName>=.

* Format

- =gq=: format the specified text object (by motion or text objects).
  + this proves to be useful when writing markdown or orgmode text to avoid
    manually breaking lines.
  + controlled by =formatoptions=

** Alignment

- =:center=, =:right=, =:left=

There is also a builtin package =justify= that deals with plain text
justification.

* New Modes

See =:h mode-switching= for mode switching operations. =C-\ C-N/G= can be used to
go to Normal mode from any other mode.

Type =gQ= (Neovim) or =Q= (Vim) under normal mode to enter =ex= mode.

** Visual Mode =v=

Define selections visually and perform editing commands on the visual selection.

- The =selection= option determines if the character under the cursor is
    selected (by default inclusive).

- =v= enters visual mode per character; =V= per line, =^V= blockwise; with a
  count prefix, the same amount of text is selected, multiplied by the count.
  Hitting them again leaves Visual Mode.
  + =Esc= exits Visual mode.

*** Motion

- =gv=; starts visual mode with the previous selection.

- =gn=, =gN=: continue the previous search pattern and select the match

- =o=, =O=: both move to the other end of the selection. =O= moves on the same
  line in Visual block mode.

- =$=: under block mode, the selection includes up to the end of all lines.

*** Operating on Selection

Most of the commands operate under Select mode without much semantic
change. See =:h visual-operators=.

=\%V= limits the match inside the selected visual area.

*** Blockwise Operators

Visual-block insert, append, change, shift, replace (=r=)

- visual-block insert inserts only if part of line is selected, otherwise a line
  remains unmodified. Deletion under insert mode deletes only one line not all.

- visual-block append appends to the end of the block unless the block is
  created with a =$= to extend to end of each line, under which case, new text is
  appended to the end of each line.

- For visual-block change, =c= changes only the selected part while =C= changes
  to the end of each line (expected semantics from =C=).

- =:vmap= and =:vmenu= for key mapping

** Select Mode


Resembles the MS-Windows selection mode.

Use =:smap= and =:xmap= for key mapping

- To Enter select mode, use =Ctrl-G= under visual mode, or =gh=, =gH= or
  =gCtrl-H= to enter select mode counterparts of visual mode

- Like MS-Windows, the selection may be extended by arrow keys.

** (Vim 8.0 & Neovim with Different Implementation) Terminal Mode

The terminal runs asynchronously. This terminal works on windows.

All input except =C-\= is sent to the process in the current terminal buffer.

There is a normal mode and a job mode (shell, CLI apps) in the terminal buffer.

- =:terminal=, or =:term= opens the terminal; or as a buffer named
  =term://progname= buffer (Neovim).
  + Neovim requires additional insert operations to enter Terminal mode
  + Vim uses =C-W= key sequences to control terminal mode. See =:h terminal-typing=.

- =C-\ C-N= enters Normal mode.

There is an older command =:shell= that forks vim and synchronously run a
shell. Only after the shell exits does vim resume.

*** Terminal Debug

TODO

** Additional Modes

- Operator-pending Mode: waiting for a motion command after an operator. e.g.
  after a =d=.

- Replace mode: a special insert mode after =R= or =r=.

- Virtual Replace mode: =gR=. This differs from replace mode in that it operates
  in visual columns not characters.
  + useful when working with tables.

- Insert Normal mode: =C-O=, temporary switch to normal mode

- Insert Visual mode: =C-O v/V/C-V= temporary switch to visual mode

- Insert Select mode: temporary switch to select mode.

* Extended Regex

More than POSIX ERE.

- ~\|~: indicates alternation

- ~\+~

- ~\&~: concatenation

- ~\=~: matches zero or one of the preceding regex

- ~{-(n),(m)}~: the =-= inside bound expressions indicates non-greed matching

- =\a= (alphabetica), =\A= (non-alphabetic)

- =\b= backspace

- =\d=, =\D=  digit  and non-digit

- =\e= escape

- =\f=, =-F= filename character, the latter excludes digits

- =\h=, =\H=: head-of-word character (letters and underscores), non-head-of-word character

- =\i=, =\I= identifier character (the latter excludes digits)

- =\k=, =\K= keyword character (the latter excludes digits)

- =\l=, =\L= lowercase and nonlowercase

- =\n= newline, =\r= carriage return, =\t= tab

- =\o=, =\O= octal and non-octal character

- =\p=, =\P= printable character (the latter excludes digits)

- =\s=, =\S= a tab or space

- =\u=, =\U= uppercase and non-uppercase characters

- =\w=, \W=: word character and non-word character

- =\x=, =X= hexadecimal digit and non-hexdecimal digit

- =\_x= any the of the previous characters: match the same character but with
  newline included

* Multiwindows behavior

- =-o=​/​=-oNumber=: start with multiple windows

- =:split [filename]=, =Ctrl-Ws=: split the window horizontally

- =:vnew= / =:vsplit=, =Ctrl-Wv=: vertically split the window (with a new buffer
  or the current buffer)

- =:new=, =Ctrl-Wn=: new window

Split commands may come optionally with a prefix to indicate the window size.

- =:sview filname= : open a file in a split window as readonly.

- =:sfind filename=: open a window for a file if found

- =:close=, =Ctrl-Wc=: close the current window; =:only=: close all but the current window

- =Ctrl-W= + =q=: quit a window (quit vim if no window exists); + =c=: close the
  current window until the tab is closed

- =Ctrl-W= + =o=, =:only= close all windows except the current window.

** Conditional Split

- =topleft=, =vertical=, =leftabove=, =aboveleft=, =rightbelow=, =belowright=,
  =botright=: modifier before a split command to open a new window only if the
  command succeeeds.

** Moving Across Windows

- =Ctrl-W= + =h,j,k,l=,

- =Ctrl-W= + =t= (top leftmost), =b= (bottom rightmost),

- =Ctrl-W= + =p= previously accessed

- =Ctrl-W= + =w=, =W=: cycle through all windows top leftmost to bottom rightmost, the case difference indicates
  different directions

** Moving Windows & Changing Layouts

- =Ctrl-W= + =r=: rotate windows on a row/column rightwards/rightwards; + =R= in the
  opposite direction

- =Ctrl-W= + =x=: exchange the current window with the nth (by default the
  first) next one
  + exchange only happens in a row or column

- =Ctrl-W= + =K, J, H, L=: move the current window, full height/width

- =Ctrl-W= + =T=: move to a new tab

** Change Windows Size

- =Ctrl-W= + =+=​/​=-= (=:resize=): increase/decrease the current windows
  height; + =<=​/​=>= (=:vertical resize=): decrease/increase width

- =Ctrl-W= + ===: resize all windows to equal size.

- =zCount= + =ENTER=: set the current window to =Count= lines
  + =:resize n=, or =n= + =Ctrl-W= + =_=

- =Ctrl-W= + =|=: resizes the current window width to the specified column (by
  default the widest possible)

- =Ctrl-W= + =o=: maximize a window

- =Ctrl-W= + =G=:

- =Ctrl-W= + =F=: edit the filename underneath the cursor.

=winheight=, =winwidth= defines the minimal size of the current active window,
even if the window in inactive state has a different size.

** Tabbed Editing

- =:tabnew filename=, =:tabedit filename=

- =:tabclose=

- =:tabonly=

- =gT=, =Ctrl-PageDown=, =Ctrl-PageUp=

- to open a tag in a new tab, =C-W C-]= open it in a new window, =C-W T= move it
  to a new tab

** Windows and Buffers

Besides multiple windows on the same tab or multitabbed editing and the old Vi
args file list, Vim can hide a window but retain the buffer.

- =:ls=, =:buffers=, =:files= lists buffers and files
  + =%= (current), =#= (alternate); =C-^= edits the alternate file,
  + =u= unlisted buffer (e.g. a help buffer)
  + =a= active (loaded and visible) buffer, =h= hidden buffer
  + =-=, ===, not modifiable. === is read-only and never modifiable
  + =+= modified, =x= read error


A buffer may be hidden by opening another file if the =hidden= option is set.
=:hide= quits the current windows. The hidden window is not closed and does not
requires saving and may be unhidden.

- =:windo cmd=: do =cmd= in each window of the current tab

- =:bufdo[!] cmd=: do =cmd= in all the buffers

- =ball=, =sball= (in new windows): edit all args or buffers

- =unhide, =sunhide= (in new windows): edit all loaded buffers

- =badd file=: add file to the buffer list; =bunload=: unload the current buffer from
  memory (the buffer is still open), =bdelete=: delete the buffer from the
  buffer list

- =b[uffer]=, =sb[uffer]=: move to a buffer

- =:bnext=, =:sbnext=, =:bNext=, =:sbNext=, =:bprevious=, =:sbprevious=, =:bfirst=,
  =:sbfist=, =:blast=, =:sblast=,

- =:bmod=, =:sbmod=: move the nth modified buffer

*** Special Buffers

- directory: a list of a directory

- help

- quickfix: list of errors created by a command or the location list,
  typically used with edit-compile-debug cycle
  + a quickfix has a quickfix ID, unique to a Vim session, and a title.

- location list: a window-local quicfix list, independent of the quickfix
  list.

- scratch

** Diff

Under vimdiff

- =]c= and =[c= to jump to the next/last change.

* Initialization

=:h startup=, also see =:h standard-path= for various paths used by Neovim.

** Configuration Files

- =$HOME/.vimrc= (Unix), =$HOME/_vimrc= (MS Windows);
  moreover =~/.config/nvim/init.{vim,lua]= (Unix),
  =~/AppData/Local/nvim/init.{vim,lua}= (Windows) and
  =$XDG_CONFIG_HOME/nvim/init.vim=.

- =-u file= reads a specified init file without reading the default one.

- =$MYVIMRC= is set to the first valid location unless it was already set or
  when using =$VIMINIT=.

- If =exrc=  is set, the current directory is searched for =.nvim.lua=,
  =.nvimrc=, =.exrc=.

- =$VIM=: the vim executable path, used for locating various user files, e.g.
  config files.

- =$VIMRUNTIME=: used to locate various support files: documentation, syntax
  highlighting files, plugins.

There is a =defaults.vim= since Vim 8.0 if none is found.

* Folding

Folding define what parts of the file to see. Folds are not simply defined by
language syntax.

To display fold levels, set =foldcolumn= to an appropriate number.

A folded block acts as a line for line operations.

** Define Folds

The =foldmethod= option defines how folds are defined/created and accepts the
following methods. Folding methods are mutually exclusive: with =syntax=
enabled, one cannot manually define a fold.

- =diff= :: defined the difference between two files, used by diffmode.

- =expr= :: defined by regular expressions
  + simple to specify

- =indent= :: corresponds to the indentation of text and =shiftwidth=
  + works for many files but not always very well.

- =manual= :: result from user Vim commands
  + for unstructured text. Use =:mkview= to create a view to save folds.
  + =zf=, =nzF=

- =marker= :: predefined markers in the file specify fold boundaries, e.g
  ={=, =}=.
  + this requires modification of the original file.

- =syntax= :: defined by the semantics of a file's language.

** Fold Commands

- =zA= :: toggle the state of a fold recursively
  + =za= :: toggle the state of one fold

- =zC= :: close a fold, recursively
  + =zc= :: close one fold

- =zD= :: delete/undefine folds, recursively (not the content in the folds)
  + =zd= :: delete one fold
  + =zE= ::  delete all fields

- =zO= :: open a fold recursively
  + =zo= :: open one fold

- =zf= :: create a fold from the current line to the one where the following
  motion command takes the cursor
  + =zf%= fold a C code block
  + =Count= + =zF= :: fold count lines. The count number here counts for visual lines
    on the screen.

- =zM= :: close all folds, set =foldlevel= to zero.
  + =zm=, =zr= :: decrement/increment =foldlevel=

- =zR= :: open (reduce) all folds

- =zN=, =zn= :: set/reset =foldenable= option
  + =zi= :: toggle =foldenable=

** Folding Theory

*** Folding by Expresson

Folds are defined by their foldlevel.

- Each line in a file has a /fold level/
  
- Lines with a fold level of zero are never folded
  
- Adjacent lines with the same  fold level are folded together

- If a fold of level N is closed, then any subsequent lines with a fold level greater than N are folded
  until a line with a level less than N.

* Comments

Defined by the ='comments'= option. Vim is able to understand comment formats
and format or navigate around them.

* Auto and Smart Indenting

Indentation width is controlled by =shiftwidth=.

- =autoindent= :: similar to vi's, differs subtly as to where the cursor is
  placed after indentation is deleted.
  + understands comments

- =smartindent= :: recognizes some basic C syntax for defining indentation
  levels
  + before a line starting with ={=, before a line starting with certain
    keywords =cinwords=
  + a new line before/after a =}=

- =Cindent= :: richer awareness of C syntax and supports customization
  + =cinkeys= :: keyboard keys under insert mode that triggers reindenting.
    Reindenting means to indent to an appropriate position.
     A set of expressions are used to define this option.
  + =cinoptions= :: indentation style. Another set of expression for various situations are used to
    define C indentation styles.
  + =cinwords= :: keywords that signal when Vim should add an extra indent in
    subsequent lines

- =indentexpr= :: custom indentation rules
  + not a trivial task to define. Predefined expressions are under =$VIMRUNTIME/indent=.

- Use =:retab= to fix inconsistent tabs. Be careful, with =expandtab= this
  may expand tab characters in a string. Use =\t= as a tab for in a string.

#+begin_comment
TODO learn more about cindent customization and indent expressions
#+end_comment

To use the file type to define indentation, set =:filetype indent on=.

If manual indentation is applied, autoindentation on that line is disabled.

Indentation options may cause indentation problems when pasting text into the
file. Set the =paste= option before pasting and reset it afterward..

- =^N=, =^P= Move in the candidate list; =Enter= to select the match; =^E= to
  halt the match without substituting any text.

* Autocompletion

Insertion completion from programming language specific keywords to filenames,
dictionary words and even entire lines. Completion includes

To accept the current match, =CTRL-Y=, to stop the completion =CTRL-E=

- Comprehensive complete =^N=, =^P= :: defined by the =complete= option.

** Completion Types

- Omni =^X-^O= :: use filetype-specific functions to determine the candidate
  list
  + C, CSS, HTML, JavaScript, PHP, Python, Ruby, SQL and XML.

- Whole Lines =^X-^L= :: look backwards for a line matching the typed characters

- Keyword =^X-^N= :: not PL-specific keywords, possibly any word in the file,
  defined by the =iskeyword= option.

- Dictionary =^X-^K= :: searches through the files defined by the =dictionary= option.

- thesaurus =^X-^T= :: searches through the files defined by the =thesaurus=
  option. A set of similar words are listed as candidates.

- keyword in the current file and includes files =^X-^I= in C/C++ ::

- tag =^X-^]= :: searches forward through the current file and includes files
  for keywords matching tags.

- filename =^X-^F= :: searches for filenames in the current directory matching the keyword at the current cursor.
  + useful when inserting paths, without any external plugin support (e.g.
    VSCode path completion).

- macro and definition names =^X-^D= :: =#define=

- =^X-^V= :: meant for use on the Vim command line and tries to guess the best
  completions for words to assist users developing Vim scripts.

- =^X-^U= :: use the completion method defined by a custom function =completefunc=.

- Spelling correction =^X-^S= :: if the word at the location appears to be badly
  spelled, "more correct" spellings are offered

* Syntax Highlighting

=:syntax enable=, =:syntax on= enable syntax highlighting.
Syntax is normally deduced from =filetype=, however, ~:set syntax=filetype~ can
set the current syntax set in use, typically a file type name.

Syntax definition files are stored in =$VIMRUNTIME/syntax=.
User color schemes are placed under =~/.config/nvim/colors=.

#+begin_src
# sets color scheme to "evening"
:colorscheme evening
# syntax schemes in use, i.e. c, fortran or idl etc.
set syntax=idl.c

# display a set of colors to test colors and show appropriate color combinations
:runtime syntax/colortest.vim

:syntax clear # switch off colors for this buffer
:syntax off # switch off colors completely

:syntax manual # enable syntax highlighting but not automatically when editing a buffer,
:set syntax=ON # requires explicit setting to turn on syntax highlighting for the current buffer
#+end_src


* Responding to Events

Autocommands are event handlers executed automatically in response to some
event. Autocommands are grouped into =augroup=. Any commands not in an
explicit group is defined in the default group.

- =autocmd [group] {events} {file-pattern} [++nested] {command}=
  + =group= is optional
  + =events= are a comma separated list
  + the command is limited to =file-pattern=

- =augroup= is not simply used to group autocommands: =autocmd!= inside a
  =augroup= clears all commands in it. This can be used to prevent duplicated
  definitons of autocommands.
  + the canonical way to use groups is to put =autocmd!= at the first line of
    the group to delete any previous definitions.

- Autocommands can trigger another event but by default they don't.

- Autocommands can be executed manually using =:doautocmd= and =:doautoall=.

- To delete an autocommand, redefine it without any command argument.

- =autocmd= lists autocommands.


* QuickFix: Edit-Compile-Edit Cycle

=:make= synchronously builds (or lints) the project using ='makeprg'= and collects the result text in the =Quickfix List=
window, where one can inspect, jump to and correct errors. Error meesages are
parsed according to the =errorformat=.  Vim also supports compiling without a
Makefile (simply =:make filename_no_ext=) for a quick compilation and comes with some compiler plugins to
support this feature (=:compiler= to switch the compiler).

- =:cnext=, =:cprevious=: move in the error list

- =colder [count]= (c-older), =:cnewer [count]=, =:chistory=: there may be more than
  one quicfix lists. these commands switch between these lists.

- =:cdo {cmd}=: do a commmand after relocation by each entry of a quickfix list to operate on those locations that generate errors.

- =errorformat=: an option defining a format of errors returned from a compile

- =makeprg=: an option containing the name of the build instruction

If =:make= cannot capture the output, one can always redirect the output to a
file and load that file with =:cfile=.

Almost all quickfix commands have location list counterparts.

** grep

Vim's grep may also take advantage of the Quickfix list.
It is used alongside with the Quickfix list even if the result has nothing to do with compilation error.

- =vim[grep]  /pattern/[g][j] files= :: use builtin grep to search for a pattern
  + by default the result is shown in the Quickfix list.
  + to search the current buffer, use =%= as the file
  + to use the location list, use =lvimgrep=

- =copen= :: open the Quickfix list to see the search result

- external =:grep= command :: use an external grep command
  + the pattern is not enclosed by =/=


*** Grepper

A convenience wrapper (but asynchronous) around =gepprg= and =grepformat=.
=ag=, =ack=, =grep=, =findstr=, =rg=, =pt=, =sift=, =git grep= are all
supported.

*** ripgrep

#+begin_src vimscript
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
set grepformat+=%f:%l:%c:%m
#+end_src


*** fzf

- =fzf= and =ripgrep= are two great tools that enables the user to search for
  files and matching text.
  + the =fzf-vim= plugin integrates =fzf= and =ripgrep= with Vim.

* Multilevel Undo

Undo/redo is not linear in Vim. If some modification is made after an undo, a
new branch is made. This branch will be the new sequence of undo and redo by
default. 

To jump to another branch, use =:undo change_number= (listed by =:undolist=). Or =g-=​=g+= to move in
time rather along the branch.
Undo and redo in time can be also done by =:earlier= or =:later= besides
keybindings. There is also =:echo undotree()= to show more details.

* Plugins (Since Vim 6)

A plugin is simply a Vim script file that is loaded automatically when Vim
starts to extend Vim's functionality. 

Plugins may be

- *global plugins*: for all kinds of files.
  + A set of standard plugins are automatically loaded upon startup.
    - =gzip=: supports transparent reading and writing of =compress= =gzip=, =bzip2=,
      =lzma=, =xz=, =lzip=, =zstd= files.
    - =netrw=: similar to Emacs' =TRAMP=. Transparent editing of files on other machines.
    - =tar=, =zip=: similar to =gzip=.
  + a global plugin is added by dropping the copy in the right directory
    - per user: =~/.local/share/nvim/site/plugin/= and its subdirectories
    - globally: =$VIMRUNTIME/plugin= and =$VIMRUNTIME/macros=, =$VIM/vimfiles/pack/dist/opt/=

- *filetype plugins* (*ftplugins*): used for a specific type of file.
  + typically put under the =ftplugin= directory
    - globally: =$VIMRUNTIME/ftplugin=
    - per user: =~/.local/share/nvim/site/ftplugin=
  + plugin files are renamed as =filetype_name.vim=, or put as =ftplugin/<filetype>/<name>.vim=.

The plugin directory (=plugin= or =ftplugin=) can be in any of the directories in the =runtimepath=
option. To debug plugin loading, start Vim with =-V2=.

When a plugin is placed in =runtimepath= (and thus installed), Vim
automatically sources the scripts it finds under these subdirectories.

There are some conventions of how plugin files should be placed under each runtime path:

- =plugin/=: compulsory plugins

- =colors/=: color schemes

- =ftdetect/=: set up autocommand that detect and set the file type of files.

- =ftplugin/=: filetype-specific scripts that vim uses to set up a filetype.

- =indent/=: filetype-specific indentation scripts

- =compiler/=: compiler-related options in the current buffer based on their names

- =after/=: after the files in =plugin/=

- =autoload/=: deferred loading

- =doc/=: documentation

** Package Management

A *package* is a directory that contains *plugins*. 
It may be a separate directory, a VCS repository, a set of interdependent plugins, "start" packages.
Packages are easier to manage, update.  
There is nothing special about packages: there are directories that are added to 
=runtimepath= automatically upon detection and they may have the same structure as any other =runtimepath= directory,
with =plugin=, =colors= etc.

Plugins and packages are managed, loaded and initialized by a plug-in managers.

*** Builtin Manager (Vim 8)

Packages may be stored in the paths  =pack/<AnyDirectory>/{start,opt}/= under each =&packpath=. 
If there is any, they are added to =runtimepath= and all plugins are loaded.
(a little confusing with an additional level of directory, possibly as a bundle of packages).
The plugins under =pack/*/start= are added to =&runtimepath= and are automatically loaded
while =pack/*/opt= are loaded only if =:packadd=ed. 

Installing a package means placing a directory of plugins under =.vim/pack/AnyDirectory/=

=start= packages are loaded automatically; =opt= packages requires =:packadd= to load them.
=:packadd= searches and sources any plugin files found under =pack/*/opt/{name}=.
That is, an optional plugin may be installed but under =opt= it is not loaded automatically.

*** [[https://github.com/VundleVim/Vundle.vim][Vundle]]

Vundle (=:h vundle= can download, update, search, clean up plugins, manage the runtime path of installed scripts.
Plugins are now managed within =$MYVIMRC=, installed and updated automatically.

*** Other Package Managers

- [[https://github.com/k-takata/minpac][minpac]] :: a minimal package manager
  for modern Vim (Vim 8 and Neovim) that takes advantage of modern Vim
  package functionality and job control.

- [[https://github.com/junegunn/vim-plug][vim-plug]] :: very similar to
  Vundle

- [[https://github.com/tpope/vim-pathogen][vim-pathogen]] :: no really a
  package manager, but a solution to manage =runtimepath= before Vim 8

**** Pathogen

Since Vim 6, adding a plugin to Vim means adding a path to =runtimepath=. 
Any scripts under =plugin= runtime directories  (=plugin= or =ftplugin/= ) are sourced.
The original plugin support from Vim 6 only searches plugin scripts under certain =plugin= 
directories but not any subdirectories, making it difficult to manage plugins in separate directories.

Pathogen places all packages under =.vim/bundle= (customizable) 
and adds any subdirectories to =runtimepath= automatically.

*** Documentation

After a plugin or a package is installed, the user or the package manager
should run =helptags= to parse, index documentation files and build a tags file.

* File Types

Vim can detect the type of file being edited by checking the file name or its content.

Filetype-related functionalities includes /detection/, /plugins/ and /indentation/.

** Enable File Types

- =:filetype on= (detection) enables detection of file types (loading =filetype.vim=).
Vim detects the file type and sets the ='filetype'= option 
executes the corresponding =FileType= autocommand matching the option's value.
Setting ='filetype'= is done by a ftdetect script.

- =:filetype plugin on= (detection, plugins) also enables the plugin files for specific file types (loading =ftplugin.vim=).
When a file is edited, its plugins are loaded.

=:filetype indent on= (detection, indent) enable loading the indent file for specific file types (loading =indent.vim=).

** File Type Detection

Detection is carried typically by an autocommand on buffer read or creation (see =:h ftdetect=).

*** Differentiate Different Types of the Same Extensions

The user may set certail =g:filetype_ext= global variables to force a file type.

** File Type Plugins

Options, mappings in file type plugins are local to the buffer, typically under =ftplugin/=.

=maplocaleader=, =<Plug>= are provided to map in a plugin-specific manner.
=<Plug>= mappings at as a public interface for users to customize key mappings 
without wiring keys directly to target actions.

*** Built-in Filetype Plugins

asciidoc, awk, fortran, freebasic, go, html, java, json, lua, man, markdown, org, plsql, python, rst,
rust, sql,  tex, yaml, zig,

Some of them offer great features and are worth reading:

- =:Man=

- =ft_sql.txt=

- =ft_rust.txt=

* Other Issues
** Current Directory

Every window can have a local current directory =:lcd= instead the global
=:pwd=. Every tab has a tab-local current directory =:tcd=

** History

There are five histories: =:= command history, search history, expression
history, input line history and a history for debug mode commands. 

When using =<Up>= to retrieve a previous command, the completion does not
simply use the last one, but the last one that completes the current one.

=q:= opens a command line window that behaves like a normal window of the command
history
so that complex commands may be composed and executed. Hitting =<Enter>= in
the window executes the line at the cursor.

Histories are saved a =viminfo= file after exiting vim.

*** Recent Files

- =:oldfiles=: list recent files without interactively choosing one.
  + =:e #<N= to open the Nth file.

- =:browse oldfiles=: choose a file to edit before after hitting =q=

** Read Man Pages

- =K=: look up the keyword under the cursor, by default using =man=.

- =Man= after =runtime! ftplugin/man.vim=.

** Read GNU Info

- Use [[https://gitlab.com/HiPhish/info.vim][info.vim]]

** Spell Check

=set spell= for certain file types. Use ~z=~ to show spell suggestions.

** File Explorer/Project Drawer

- [[https://github.com/tpope/vim-vinegar][vim-vinegar]]

- NERDTree: a side bar that displays the current workspace.
  + NERDTree supports bookmarks, which remembers directories as bookmarks to
    quickly navigate to a root.

The problem with project drawers (like NERDTree) is that when opening a file in it, 
it is difficult for the user to predict which window the file will occupy.
Unlike NERDTree, the builtin netrw is a split explorer that opens a file in the window it occupies.

** GDB Debug

=termdebug=, a builtin plug-in that runs GDB from inside Vim.

** Vertical Ruler

=set colorcolumn=columnNumber1,columnNumber2=

** Clipboard Integration

- the =clipbard= option
  + =unnamed=: use the =*= register as the clipboard (X11 primary selection)
  + =unnamedplus=: use the =+= register (the Windows-style clipboard)

** Binary Files

=-b= or =:set binary=. =textwidth=, =wrapmargin= are set to zero. =modeline= and
~expandtab= are unset~.
To show bytes as hex, =:set display=uhex=. To show what normal hex editors
would display, run =%!xxd= to convert and =%!xxd -r= to convert back. This is
still not perfect and prone to destroy the original file.

Another editor designed to edit binaries is =bvi=.  =vim -b= is not designed
to edit binary files, use =bvi= for that.


** Display Buffers as HTML

Vim can convert the rendered buffer to an HTML document, duplicating the
original Vim graphics =TOhtml=.

** Backup

- =backup= :: make a backup before writing a file and leave it around after writing.

- =writebackup= (default) :: make a backup before writing a file and delete it after writing.

** Sessions

- *viminfo*: a global session file that saves command line history, search
  string history, input line history, non-empty registers, file marks, last
  search/substitute pattern, the buffer list and global variables.
  + =viminfo= is great: one can restore where he left by simply typing ='0=
    to return to the last mark.

- *Session*: addition to viminfo, a view is a collection of settings that apply
  to one window; a session keeps the views for all windows plus the global
  setting.
  + =:mksession session_filename.vim=: a session file, similar to a vimrc script
    file, is created. The user is supposed to =:source= the script to restore
    the session or =vim -S session.vim=.

- *View*: the properties for a window used to restore the contents of a
  window. Views are part of a session.
  + =:mkview=, =:loadview=

** Modelines

Just like Emacs and Python can have some settings in the text, modelines of
Vim are some commands placed at the beginning of a file to enable Vim to set
certain options for that file.

** Truecolor Support

- =set termguicolors= to enable 24-bit true color support.

** Remote

Vim and Neovim support a client-server mode (if compiled with =clientserver= option, by
default on Neovim).
A client remotely programmatically control the server.

#+begin_src shell
nvim --listen pipepath/socket
nvim --server
vim --servername
#+end_src

** Remote Editing (netrw)

scp, rsync, sftp, ftp, http, dav and rcp are supported.
Use =:e file_url= to open a remote file, =:Nread= to read into the current
buffer,
=:w file_url= to write to a remote path or =Nwrite=. Directory listing is also
possible (on target machines of Linux only, through ssh and ftp only).

To speed up file transfer, consider ssh's =ControlMaster= feature.

** Use with Shell

set =EDITOR= to =vim= and =C-x C-e= to invoke the editor to edit the current
line. use =cq= to exit to avoid executing the command.

** Editing Tables

There is no builtin  support for tables, but the =virtualedit= option makes
editing a table easier. It eliminates the need to insert any whitespace
characters and allows the cursor to simply move to a column. To replace text
in the table, use =gr= and =gR= (virtual replace mode) for proper tabulation
(maybe also useful for ASCII art).

** Run a Script on Files

=vim -e -s $file < script.vim= runs in =ex= mode, with =-e= it runs in normal
mode. To generate a normal mode script, use =-w= to record operations.

** Read From STDIN

=vim -=

** Encryption

*** The Builtin Solution

- start a file with =-x= to start in encryption mode.

- ~set key=encryption_key~ to enable encryption mode.

** Automatic Line Breaks

Set by =textwidth= (fixed width) and =wrapmargin= (wrap at the margin of
screen).
A line is only broken automatically under insert mode and when appending to a
line. To break existing lines, use =gq=.

=wrap= (unconditionally) =linebreak= (at word boundaries) control where lines are break visually (not physically with a
line ending).

See =:h ins-textwidth=

* Integrated Solutions

- [[https://rapphil.github.io/vim-python-ide/][Vim as a Pyton IDE]]: a
  full-IDE solution for Python

- [[https://realpython.com/vim-and-python-a-match-made-in-heaven/][VIM and Python - A Match Made in Heaven]]: a step-by-step tutorial to set up an IDE for Python

- [[https://github.com/python-mode/python-mode][Python-mode]]: seems dead,
  but still useful as a reference

- [[https://github.com/kingofctrl/vim.cpp][vim.cpp]]: a solution for C/C++,
  no longer maintained, for reference.

- [[https://puremourning.github.io/vimspector-web/][Vimspector]]: a debugging
  solution

- [[https://github.com/jez/vim-as-an-ide][Vim as an IDE]]: another tutorial
  to set up a VIM IDE.
