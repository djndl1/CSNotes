** Moving Around Quickly

- Use [[https://github.com/easymotion/vim-easymotion][vim-easymotion]] 

- Fold text to see an outline.

- Use =*= to search the word under the cursor instead of typing it manually.

- Use =%=, =[(=, =])= to move to parentheses.

- Use =gd= and =gD= for a local variable declaration.

- Use =[ CTRL-I= and =] CTRL-I= to search and jump to a word

** Save Some Typing

- Repeat with =.=

- Use insert mode completion =C-n=

- Record and replay

- =CTRL-O= to execute a normal-mode command under insert mode.

- =gv= to select the last selected region.

** Change a Word in Multiple Files

This may be useful in code editing, which may be accomplished by a language
server, but this technique is not restricted to code only.

- =:args *.c=

- =:argdo %s/text_replaced/text_replacement/ge | update=: every argument, not
  every buffer or window to avoid unnecessary edits and finally update the
  changed files.

** Fix Mistyping

- abbreviate some common errors, such as =:abbr hte the=

** Quick Insertion & Deletion

- =CTRL-W= to delete a word

- =CTRL-U= to delete text up to the cursor.

- =CTRl-A= and =CTRL-@= (exits insert mode) to insert the text inserted last time.

- =CTRL-Y= inserts the character above the cursor 
  + for repeating the previous line but with some variations.

- =CTRL-R= insets a register without entering normal mode and use yanking.


** Sort Text

Use a filter: =RangeOfText !sort=

** Reverse Lines

=:global/^/move 0= reverses all lines. Set a range and a proper target to
reverse a certain range.

** Trim Trailing Whitespaces

- =%s/\s\+$//=

** Editing Files Containing a Certain Word

=vim $(grep -l keyword myfiles*.ext)=

** Join Many Lines of a Paragraph Into One Physical Line

=g/./,/^$/join=: join all the way to an empty line.
