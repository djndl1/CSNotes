#+title: Emacs

* Help

- =C-h= to invoke help

* UI Concept

- /Frame/ :: normal MS Windows term would be /windows/. Under a terminal, it is the entire terminal screen.

- /Window/ :: visual subregions within a frame.
  + Vim uses windows as well: it just doesn't use the term "frame".
  + at any time, only /one/ window is the "selected window".

- /Buffer/ :: the area where text is loaded.
  + the buffer contained by the selected window is the "current buffer".

- /Point/ :: the location that the cursor operates, before the cursor block.
  + each buffer has its own /point/.

- /Echo area/ :: the bottom of the frame, where various small text or messages are displayed.
  + Informative echo messages are saved in =*Message*=.
  + also for displaying the "minibuffer".

- /Mode line/ :: the status line at the bottom.
  + =**= modified modifiable buffer, =%*= modified readonly buffer, =%%= otherwise
  + =FN= the Nth 

- /Menu Bar/ :: mouse-clickable or =F10=

* Input Concepts

- /Input Event/ :: simple characters and control characters as well as certain non-keyboard inputs

- /key sequence/ :: a sequence of one or more input events meaningful as a unit
  + /complete key/ :: a key sequence that invokes a command. No more key sequences
    may be added to a complete key.
  + /prefix key/ :: a key sequence not long enough to invoke a command.
    There are some predefined prefix keys but the list may be not be limited to these.
  + there is not limit to the length of a key sequence.

- /Mouse Events/ :: =mouse-1= (left mouse click), =mouse-2= (middle mouse click),
  =mouse-3= (right mouse click), =wheel-down= (=mouse-4=), =wheel-up= (=mouse-5=).

Emacs does not assign meanings to keys directly: keys are bound to commands (functions).
Customization depends on various /variables/.

* Enter and Exiting

It is unnecessary to start Emacs afresh for each file. Emacs may function as a server.

- =C-x C-c=: =save-buffers-kill-emacs=, for a client, it simply closes the client frame.

- =kill-emacs=: kill without being prompted about saving.

- =C-z=: suspend/minimize the frame
  
* File Handling

- the minibuffer supports =$= to read an envvar.

- =C-x C-f=: =find-file=; =C-x C-r=: =find-file-read-only=; =C-x C-v=:
  =find-alternate-file= (kills the current one and find another); =C-x 4 f=: =find-file-other-window=;
  =C-x 5 f=: =find-file-other-frame=; =find-file-literally= (treat the file as a file of ASCII).

- =C-x C-s=: =save-buffer= (the current one), =C-x s=: =save-some-buffers=;
  =C-x C-w=: =write-file= (SaveAs); =M-~=: mark as not modified to avoid saving.

- =insert-file=, =write-region=: read into/write text region to

  Emacs is able to read/write files in a compressed format or in an archive.

** Backup Files

Emacs saves the file the first time it's loaded into the buffer as a backup.

TODO

** Directory

- =C-x -C-d=: =list-directory=;

- =C-u C-x C-d=: a more verbose directory listing

- =make-directory=, =delete-directory=

*** =Dired=

- =C-x d=; =dired-listing-switches=

- Navigation: =SPC=, =DEL=, =j=, =M-s f C-s=

- Deletion: =d= (=dired-flag-file-deletion=), =u= (=dired-unmark=), =DEL=
  (=dired-unmark-backward=), =x= (=dired-do-flagged-delete=)

- Opening: =o=, =C-o=, =v= (view the file), =^= (move up the directory)
** Comparing Files

- =diff=, with =diff-switches=; =ediff=: a sophisticated diff mode.

- =diff-buffer-with-file= (and =magit-diff-buffer-file=): compares the buffer with its file.

- =compare-windows=

=diff-mode= shows a patch, the difference between two files. Changes in a patch
are grouped into *hunks* (contiguous chunks of text that contains one or more
changed lines). Each hunk starts with a *hunk header* that specifies the old and
new line numbers at which the hunk occurs.

TODO

* Editing

** Insertion

- =C-q=, =quoted-insert= in literal keys or in numeric value (Unicode by default): to insert any characters.
  + =read-quoted-char-radix= sets the input format used by  =quoted-insert=

- =C-x 8 RET= (=insert-char=): inserts unicode characters
  using a code point value, a character name, an abbrevation.
  + without the =RET=, =C-x 8= may be with =[=, =]=, ={=, =}=
    to type some special characters.

- =C-o=, =open-line=: insert a blank line after the cursor.

- =C-j=: newline (the caret notation of newline, useful in minibuffer) without automatic indentation.
  + =C-m= (caret notation of carriage return, bound to =newline=) seems to automatically indent somehow while =C-j= (=electri-newline-and-maybe-indent=) does not.
  
- =C-x C-o= (=delete-blank-lines=): delete blank lines and leave only one.

** Point (Cursor) Navigation

- =C-f= =forward-char=; =C-b= =backward-char=;

- =C-n= =next-line=; =C-p= =previous-line=: work on visual lines
  + affected by =line-move-visual= (default =t=)
  + =next-line-add-newlines= adds a newline at EOF upon =next-line=.

- =C-a= =move-beginning-of-line=; =C-e= =move-end-of-line=

- =M-f= =forward-word=; =M-b= =backward-word=

- =M-r= =move-to-window-line-top-bottom=: reposition the point (cursor)
  on the left upper, middle and lower of the window.

- =M-<= =beginning-of-buffer=; =M->= =end-of-buffer=

- =M-g M-g=, =M-g g=: =goto-line=

- =M-g <TAB>=: =move-to-column=

- =M-g c=, =goto-char=: to the nth char in the buffer

- To navigate a line visually, set =line-move-visual= to =t=

** Deletion

- =<BACKSPACE>= =delete-backward-char=,
  =C-d= =delete-char= (at point, the semantics stays the same when operating on a marked region),
   =<Delete>= =delete-forward-char=

- =C-k= =kill-line=

- =M-d= =kill-word=; =M-<BACKSPACE>= =backward-kill-word=

** Move Screen

- =C-v=, =scroll-up-command=; =M-v=, =scroll-down-command=

** Status Awareness

- =line-number-mode=, =column-number-mode=, =hl-line-mode= (highlight), =display-line-mode=

- =what-line=, =C-x == (=what-cursor-position=)

- =count-words=, =M-== (=count-words-regioin=)

- =size-indication-mode=

** Undo/Redo

- =C-/=, =C-x u=, =C-_=: undo one entry of the undo records.

** Numeric arguments

Some commands interpret the prefix numeric argument as a repetition count.

- =digit-argument= =M-<number>=; =negative-argument= =M--= with a following number argument
  + multiple digits are supported
  
- =universal-argument= =C-u=: the universal way to  specify arguments
   for the next command (not necessarily a repetition).
   To force a repetition, use =C-x z= after the command.
   + =C-u= itself can be represent 4 times.

- =C-u= also ends any argument input operation, especially if the following input is a digit.
  + to insert 5 copies of 0, type =M-5 C-u 0=
    
To use arguments with a named command, specify the argument before running =M-x= with the command.

A numeric argument is not the only way to repeat a command: type =C-x z= to repeat a command,
more =z= to repeat more times, similar to how vim =.= works.


** Minibuffer

The area under the modeline, used also by the echo area.

*** Minibuffer Completion

=TAB=, =SPC=, =RET=, =?=, use with =M-v= (switch to the completion list)

*** Minibuffer History

- =previous-history-element=, =next-history-element=, =list-command-history=

- =C-x ESC ESC=: reexecute a recent minibuffer command

* Help

- =C-h=

- =C-h a=: searches for commands

- =C-h b=: describe bindings

- =C-h d=: search in documentation for keywords

- =C-h i=: the GNU Info manual

- =C-h f=: describe functions

- =C-h C-f= the Emacs FAQ

- =C-h p=: lists available Emacs packages

* Region, Mark

- *Region*: selected text  between the mark and the current point.
  + a region may be deactivated. To deactivate a region, use =C-g=;
    to activate a region, use =C-x C-x= (=exchange-point-and-mark=),
    it also switches between the cursor and the mark.

- *Mark*: the initially starting end of the selected region.

- *Mark Ring*: each buffer remembers previous locations of the mark in the *mark ring*.
  Setting a mark and then releasing it saves the mark in the mark ring.
  + =C-u C-SPC=: move the cursor back to the previous mark.
    An argument N indicates the last Nth mark.
  + A global mark ring exists alongside the buffers' rings.
    =C-x C-SPC= jumps to the buffer and position of the latest entry
     in the global ring (saved at the same time as in a buffer's ring).

 Marks and regions are highly related in Emacs
 and that is why =C-SPC= sets a mark and activate a region at the same time.

- =C-SPC=: set the mark at point, enter the mark mode. Hit twice to simply set a mark
  without marking a region.

- =SHIFT=-selection together with certain cursor motion commands: =S-M-f=

- =M-@=: move mark to the end of the next word;
  =C-M-@=: mark to the end of following balanced expression.

  Many commands that insert text set the mark at the other end of the inserted text
  without activating it.

  There are also commands that [[info:emacs#Marking Objects][mark textual objects]]. Unlike norma CUA editors, activating a region and
  inserting some text does not delete the region unless delete selection mode is enabled.

** Operating on the Region

Killing, yanking, changing case, undo, query replace, indentation, filling, spell check,
saving to a register, saving to a buffer or a file.

- =C-w=: =kill-region=, =M-w=: =kill-ring-save=.

- =M-%=: =query-replace=, query whether to replace and replace if yes.

- =C-x TAB=: indent

* Killing And Moving Text

- *killing*: erasing text and saving it into the kill ring.

- *yanking*: pasting the text from the kill ring back into the buffer.

Killing also copies text to the system's clipboard.

** Deletion

- Delete blanks: =M-\= (delete whitespaces around point), =M-SPC= (delete all but =just-one-space=), =M-^=: move the current line up by deleting the previous newline, while =C-x C-o=: deletes the next newline of the current line.

** Killing

- =C-k=: =kill-line= (kill to the next line), works with arguments

- =C-S-backspace=: =kill-whole-line=, works with arguments.

- =C-w=: =kill-region=; =M-w=; =M-d=: =kill-word=; =M-BACKSPACE=: =backward-kill-word=;

- =C-M-k=: =kill-sexp=

- =M-z char=: =zap-to-char= (kill to the next occurrence of the character).

** Yanking

Emacs respects the system's clipboard.

- =C-y= (with arguments earlier kills are inserted), =M-y= (=yank-pop=, choose from the kill ring).

- =C-M-w= + kill command: kill the text and append/prepend it to the previous kill entry.

- =mouse-yank-primary=: yanks the primary selection under X. The secondary selection of X is rarely used.

- =append-to-buffer=, =prepend-to-buffer=, =copy-to-buffer= (destroy and copy), =insert-buffer=, =append-to-file=

** Rectangles

There are two ways to do rectangle operations.

- The Rectangle commands, starting with =C-x r=: =C-x r k=, =C-x r M-w=, etc.

- Enter the rectangle mark mode with =C-x SPC= and use normal commands.

* Register

- *Register*: positions, text, rectangles, numbers, windows configurations,
  a file name are saved for later use.

- *Bookmark*: records files and positions.

** Saving Positions

- =C-x r SPC a=: =point-to-register= record the position of point and the current buffer in register =a=

- =C-x r j a=: =jump-to-register= =a=

** Saving Text

- =C-x r s r=: =copy-to-register=; =append-to-register=, =prepend-to-register=

- =C-x r i r=: =insert-register=

** Saving Rectangles

- =C-x r r r=: =copy-rectangle-to-register=

- =C-x r i r=: =insert-register=

** Bookmarks

- =C-x r m RET=:set the bookmark for the visited file at point.

- =C-x r m bookmark RET=: =bookmark-set=

- =C-x r b bookmark RET=: =bookmark-jump=

- =C-x r l=: =list-bookmarks=

- =bookmark-save=: save all the current bookmarks in the default bookmark file.

* Controlling the Display

- =scroll-down-command=, =scroll-up-command=, =scroll-down=, =scroll-up= scrolls text, not the window, opposite to what modern editors do.

- =recenter=, =C-l= (=recenter-to-bottom=, with arguments, this scroll the page to put the point at a certain line in the window, =C-u C-l= recenters), =C-M-l= (=reposition=).

- =view-mode=: =SPC= and =DEL= to scroll a page, =d= and =u= to scroll half a page. =RET= and =y= to scroll by one line.
  =e= to exit view-mode. =q= quits and *closes* the current buffer.
  + =view-mode= may be entered by =view-file=.

- =follow-mode=: scroll two buffers that shows the same buffer together

- =C-x <= (=scroll-left=), =C-x >= (=scroll-right=)

- Narrowing: =C-x n n= (=narrrow-to-region=), =C-x n w= (=widen=), =C-x n p= (=narrow-to-page=), =C-x n d= (=narrow-to-defun=). To get the current point after narrowing, use =C-x ==.

** Faces

*Faces*: different text styles. Each face can specify various /face attributes/: font, height, weight, slant, foreground and background color.
=list-faces-display= displays all faces.

TODO

* Searching and Replacement
:PROPERTIES:
:ID:       5d1a488b-cc8f-4c26-9de8-3b6daabcc142
:END:

** Incremental and Nonincremental Search

By /incremental/, it means the user do no have to type the entire search string
before any searching and matching takes place.

- =isearchx-forward=, =isearch-backward= :: the search ends with a =RET= (=isearch-exit=) when the
  user decides that the target item is found. =isearch-cancel= or
  =isearch-abort= abandon the search and returns to the original point.
  + the original point is marked after exiting the search. =C-u C-SPC= goes back
    to the previous mark.
  + double type searches the previous item.
  + forward and backward search can switch to each other without changing the
    keyword.
  + Previously searched strings are saved in the /search ring/, which can be
    retrieved with =isearch-ring-retreat= and =isearch-ring-advance=.
  + =isearch-yank-word-or-char=, =isearch-yank-symbol-or-char=, =isearch-yank-line= appends the next
    word/rest of the line at point to the current search string.
  + =isearch-forward-thing-at-poinit= searches the thing found near point.
  + =M-e= edit the search string during searching, =C-M-d= deletes the current
    search string.
  + =M-c= changes case sensitivity.
  + =M-r= toggles regex search, or with =isearch-forward/backword-regexp=. Regex
    search has independent defaults, search rings.
  + =C-h C-h= for help during searching.
  + =RET= with no search strings starts */nonincremental search/* (not of much
    use and inconvenient to use), or with
    =(re-)search-forward= and =(re-)search-backward=.

- =isearch-query-replace= :: search and replace with a yes/no query

** Word and Symbol Search =M-s=

- =isearch-forward/backward-word= :: the type of punctuation and the number of
  white spaces between words are ignored. Useful for text documents where white
  spaces exists only for formatting reason. Major modes may alter the definition
  of a word.

- =isearch-forward/backward-symbol= :: the boundaries of the search must match
  the boundaries of a symbol. The meaning of symbol in this context depends on
  the major mode, and usually refers to a source code token.


** Grepping

- =grep=, =lgrep= ::

- =grep-find=, =find-grep=, =rgrep= :: use =grep= via =find=

- =zgrep= ::

- =kill-grep= ::

Any shell command is allowed when grepping.
* Buffers and Windows

** Buffers

- =C-x b=, =C-x 4 b=, =C-x 5 b= (separate frame)

- =C-x C-b=: =list-buffers=

- =C-x C-q=: =read-only-mode=

- =C-x k=: =kill-buffer=; =kill-matching-buffers=; =clean-buffer-list=

- =buffer-menu=; =buffer-menu-other-window=

** Windows

- =C-x 2=, =C-x 3=: split horizontally/vertically

- =C-x o=: =other-window=; =C-M-v=: =scroll-other-window=

- =C-x 4=-family commands display buffers in another window

- =C-x 0=: =delete-window=; =C-x 1=: =delete-other-window=;

- =C-x ~=; =C-x }=; =C-x {=; =C-x -=; =C-x +=

* International Support

=view-hello-file= shows various characters that Emacs supports.

- =current-language-environment=: combination of various language-related and character
  coding settings including a coding system, character sets and input methods.

** Input

- =insert-char=: insert unicode characters.

- various input methods.
  + =describe-input-method=
  + =toggle-input-method=
  + =set-input-method=
  + =quail-show-key=

** Displayed Characters

- =describe-character=

- =what-cursor-position=

** Character Coding System

Emacs internally uses UTF-8 to handle string.

When reading a file, Emacs tries to recognize its coding system (and succeeds
most of the time).

- =buffer-file-coding-system=: the default coding system to use on saving.

- =describe-coding-system=

- =list-coding-systems=

- =set-buffer-file-coding-system= (save as, for output), =revert-buffer-with-coding-system=
  (reopen as, for input)

- =recode-region=: convert character coding of a region from one to another

=unix=, =dos= and =mac= indicates EOL marker schemes.

=raw-text= show charaters as ASCII characters and byte values.
=no-conversion= does nothing to convert bytes to characters. Both set
=enable-multibyte-characters= to =nil=.

** Fontsets

The entire range of scripts requires /a collection of many fonts/ (fontset),
defined by Emacs itself.

** Charsets

Different concept from a coding system. Emacs has a preference for fonts
depending on charsets.

- =list-character-sets=

- =list-charset-chars=

** Further Reading

[[https://nullprogram.com/blog/2014/06/13/][Emacs Unicode Pitfalls]]

* Major and Minor Modes

- *Major Mode*: specialized facilities for working on a specialized file type. Major modes are mutually exclusive.
  + Three groups:
    - Normal text, plain or markup
    - Various programming languages
    - special buffers such as shell, =Dired=, =Message=.
  + =C-h m= describes the current mode.
  + Each major mode defines a mode hook, a list of Lisp functions to run each time the mode is enabled in a buffer.

- *Minor Mode*: optional features not necessarily specific to a type of file or buffer.
  + Minor modes can be buffer-local or global.
  + Some useful minor modes:
    - =display-line-numbers=
    - visual line-mode.
    - line number mode, enabled by default
    - menu bar mode
    - scroll bar mode

Emacs determines the major mode by first finding a =; -*- mode: my-mode ;-*-= string in the buffer, then by =#!=, then by matching the start of the text, then matching the file name and finally falling back to another mode.

* Normal Text Editing

- =M-t=: =transpose-words=, exchange two words at both sides of the point.

- =M-a=, =M-e=, =M-k=, =C-x DEL=: sentence editing commands.

- Case conversion
  + =M-l=, =M-u=
  + =M-c=
  + =C-x C-l=, =C-x C-u=

- =M-{=, =M-}=, =M-h=: paragraph commands

- =auto-fill-mode=: automatically breaks the line at spaces when necessary (filling the text)
  + =M-q=: =fill-paragraph=
  + =C-x f=: set the fill column
  + =fill-region=
  + =M-o M-s= Center a line

** Spell Check

Hunspell, Aspell, Ispell and Enchant are supported.

- =ispell= (interactive spell, not the ispell program) ::

- =ispell-word=, =ispell-buffer=, =ispell-region=, =i ::

- =flyspell-mode= :: highlights misspelled words

- =flyspell-prog-mode= :: highlights misspelled words for comments and strings only

* Source Code Editing

- =prog-mode-hook= is run before the PL's major mode.

- *defun*: a major definition at top level in the buffer such as a function.
  Many PL modes assume by default that any opening delimiter found at the left
  margin is the start of a top-level definition (*defun*)
  + =beginning-of-defun=, =end-of-defun=, =mark-defun=

- *Imenu*: list major definitions in a buffer

- =which-function-mode=: show in which function the point is.

** Indentation

Emacs is responsible for reindenting the source code buffer.

- =TAB=: =indent-for-tab-command=, =C-u TAB=: shift an entire parenthetical grouping

- =C-M-q=: Reindent all the lines within a parenthetical grouping.

- =c-set-style=, =c-default-style= for various major modes.

** Balanced Expressions

- =C-M-f/b/k/t/@/SPC=: move, kill, transpose, mark based on sexp.

- =C-M n/p/u/d=: parenthetical grouping navigation: next grouping, previous grouping, uplevel, downlevel

- =electric-pair-mode=: easy insertion of matching delimiters.

** Comments

- =M-;=: =comment-dwim=; =C-x C-;=: =comment-line=, =C-u M-;=: =comment-kill=;

** Find Identifier References

- *identifier*, *tags* :: a syntactical subunit of the program: a function, a
  subroutine, a method, a class, a data type, a macro.

- *xref* :: a unified interface for dealing with identifiers. The backend for
  the major mode is responsible for gathering the information of identifiers:
  either using builtin means or through an external program (=etags=).

- =xref-find-definitions=, =xref-find-apropos=,  =xref-find-defintions-other-window=, =xref-go-back=  ::

- =xref-etags-mode= :: force =xref= to use etags again.

*** Search and replace

- =M-?= :: find all references for the identifier at point.

- =xref-find-references= ::

- =tags-search= ::

- =tags-query-replace= ::

- =fileloop-continue= :: continue the search

- =xref-query-replace-in-results= ::

*** Inquiries

- =complete-symbol= (=C-M-i=) :: perform completion on the text around point

- =list-tags= ::

- =tags-next-file= ::

*** Tags

#+begin_quote
A tags table records the tags extracted by scanning the source code of a certain
program or a certain document.
Emacs uses the tags tables via the etags package as one of the supported backends for xref.
#+end_quote

Typically, tags are function names, type names, macro definitions, global
variables, member variables/fields.

To generate tag tables

#+begin_src shell
find . -name "matching_files" -print | etags -
#+end_src

Emacs at any time uses only one /selected/ tags table.

- =visit-tags-table= :: set the tags table.
** Programming Documentation Lookup

- =C-h S=: =info-lookup-symbol= to view the Info doc for a symbol used in the program.

- =man=, =woman=

- =C-h f=, =C-h v= for elisp.

** Other Features

- =hs-minor-mode=: hideshow a block, =C-c @= with various related command. But we also have =fold.el=.

- the =semantic= package: language-aware editing commands based on source code parsers.

- =prettify-symbols-mode=: replace certain strings with more attractive versions for display purposes. Not really for programming.

- =flymake-mode=: a linter for many PLs.

** For C-Family Languages

- =C-M-a=, =C-M-e=, =M-a=, =M-e=

  TODO


** Linting

*** =flymake-mode= On-The-Fly Syntax Checking (Make On-The-Fly to Check)

#+begin_quote
Flymake collects diagnostic information from multiple sources,
called backends, and visually annotates the buffer with the
results.

It periodically compiles an active buffer when the minor mode is enabled, and then flags or highlights lines that cause errors or warnings during the compile as you edit.
#+end_quote

The overall approach is primitive, compared to integration with a language parser
or a linter.

Only a few languages are supported with builtin checkers (mostly compilers). A few third-party
checkers are available.

The buffer-checking service is done via the hook =flymake-diagnostic-functions=.

*** [[https://www.flycheck.org/en/latest/index.html][Flycheck]] Syntax Checker

#+begin_quote
Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs,
intended as replacement for the older Flymake extension which is part of GNU
Emacs.

It uses various syntax checking and linting tools to automatically check the
contents of buffers while you type, and reports warnings and errors directly in
the buffer, or in an optional error list.

Out of the box Flycheck supports over 40 different programming languages with more than 80 different syntax checking tools, and comes with a simple interface to define new syntax checkers.

Many 3rd party extensions provide new syntax checkers and other features like
alternative error displays or mode line indicators.

The Emacs community has produced a number of extensions to Flycheck.
#+end_quote

Enable =global-flycheck-mode= and install external checkers. Use =C-c !=.
Flycheck can have =lsp-mode= support and uses lsp as a backend.


** Compilation

- =compile=, =recompile= :: basically starts a noninteractive subshell and run some custom
  command and show the output in a special =*compilation*= buffer which cna
  direct the user to where the error takes place.

** Debugging

- *GUD* (Grand Unified Debugger): an Emacs interface to a wide variety of symbolic debuggers.
  + supports gdb, pdb, Guile REPL debug, jdb (java)
  + The GUD interaction buffer is an Emacs buffer which is used to send text
    commands to a debugger subprocess, and record its output. It is a variant of
    Shell mode. /A few special commands (breakpoints, stepping etc.) are
    available in the GUD buffer/
    + =gud-break=, =gud-step=, =gud-refresh=, =gud-next=, =gud-stepi=,
      =gud-cont=, =gud-remove= etc.

- =gdb= (IDE-like interface) ::

- =gud-gdb= (with a GUD buffer) ::

- =perldb= ::

- =jdb= ::

- =pdb= ::
J
- =guiler= ::

- =C-x C-a=-series of commands to control the debugger.

* Shell and Terminal in Emacs
:PROPERTIES:
:ID:       8f9ff977-9c69-4b1b-9e1f-5f079fda92c9
:END:

** Basic Commands

- =shell-command=, =async-shell-command=, =shell-command-on-region= ::

- =shell= :: interactive subshell in =shell-mode=. Still like a typical Emacs buffer. New
  commands must be entered at the end of the buffer.

- =term= :: full VT100-style terminal emulation in =Term-mode=.
  + supports =term-line-mode= and =term-char-mode=

** Eshell

A command shell written Elisp, an Emacs REPL.  It never uses =exec= but Elisp functions.
The command can be an Elisp function or an externa command. There is no job
control.

Some common Unix commands are implemented in elisp in Eshell.

- =grep= family :: Emacs's internal =grep=

- =jobs= :: =list-processes=

- =su=, =sudo= :: TRAMP's =su= or =sudo=.
* Configuration and Customization

- =customize=: an interactive mechanism to configure emacs

** Init File

An =init.el= at =~/.emasc.el=, =~/.emacs.d/init.el= or
=~/.config/emacs/.init.el=.
=user-emacs-directory= is set to indicate which
directory is used.

=init.el= consists of one or more Elisp expressions. An =early-init.el= is an
init file that is read before package initialization.

** Variables

Elisp variables are for internal record keeping but also user customization.

- =describe-variable=: show the variable's value and documentation

- =set-variable=: change the value of a customizable variable. Use =setq= for
  any variable.

*** Hooks

A variable holding a list of functions that are called on some well-defined
occasion.

- /normal hooks/ =-hook=: functions without arguments are run in turn in the
  order they appear in the hook list.

- /abnormal hooks/ =-functions=:

Use =add-hook= to add a hook function to a hook variable.

#+begin_src elisp
(add-hook 'org-mode-hook 'auto-fill-mode)
#+end_src

*** [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Locals.html][Buffer-Local (Per-Buffer) Variables]]

After setting a variable to local, any assignment would be local.
To set the global value, use =setq-default= and =default-value= access the
value.

*** [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Locals.html][File-Local Variable]]

Variables that are automatically applied to a file.

#+begin_src elisp
-*- mode: org; var: value; ... -*- ;; at the first line
#+end_src

Or =add-file-local-variable-prop-line=.
Or near the end of the file with a local variables list (within a comment block
if necessary)

#+begin_src elisp
Local Variables:
mode: c
comment-column: 0
End
#+end_src

Some special variables are defined

- =mode=: the specified major mode (use =eval= for minor modes, not recommended
  though since this forces other uses to use the same minor modes).

- =eval=: evaluates the specified Lisp expression

- =coding=: the character coding system

- =unibyte=: if =t=, load or compile an Elisp file in unibyte mode (texts are
  viewed as pure bytes instead of character).

File variables may be unsafe and emacs prompts the user to accept these variables.

*** [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html][Directory-Local Variables]]

For customization in a directory.

#+begin_src elisp
;; basically an alist of alists
;; alist with mode or a directory name as the the key and an alist of variable-value or mode-variable_alist as the value
;; the more specific modes take priority
((mode-name-or-nil-for-all-modes . ((variable-name-one . variable-one-value)
                                    (variable-name-two . variable-two-value)))
 (mode-two . ((variable-name-three . variable-one-value)
              (subdirs . nil))) ; a special keyword that indicates the setting does not apply to subdirectories
 ("directory" . (nil . ((variable-n-name . variable-n-value))))) ; applies only to "directory"
#+end_src

=coding=, =eval=, =unibyte=, =mode= are also accepts as directory-local
variables.

** Key Bindings

Emacs assign meanings to keys by binding them to commands (interactive elisp functions).

- /key binding/: a mapping between a key and a command.

- /key sequence/: a sequence of input events that have a meaning (from the
  binding) as a unit.

- /keymaps/: data strctures that store the key binding between key sequences and
  command functions.
  + /the global keymap/: always in effect. =global-set-key=, =global-unset-key=
  + /local keymaps/: each major or minor mode can have its own keymap which
    overrides the global definitions of some keys. The definitions for a prefix
    in local keymaps and the global keymap are combined. =local-set-key=,
    =local-unset-key=, =define-key=
  + the minibuffer has its own set of local keymaps.
  + interpreting a key sequence of multiple events involves a chain of keymaps:
    the first keymap gives a definition for the first event, which is another
    keymap, which is used to look up the second event in the sequence, and so
    on. A keymap definition may be a function that returns the map.
  + Emacs supports modifier keys other than /control/ and /meta/, including
    /Super/, /Hyper/ and /Alt/, not defined by default though.
  + Emacs can treat control characters and corresponding keys differently but
    normally they are automatically mapped to each other.
  + disable a command instead of undefine a mapping.

#+begin_src elisp
(global-set-key (kbd "C-c y") 'clipboard-yank)
#+end_src

* Emacs Version Control
:PROPERTIES:
:ID:       50216106-c18d-4dee-b773-e1eb660e859b
:END:

Software systems that are responsible for managing changes to computer programs,
documents, large web sites or other collections of information.

Version Control in Emacs supports multiple backends (Bazaar, CVS, Git,
Mercurial, Monotone, RCS, Subversion). It provides a uniform interface for
common operations in many version control operations.

** Emacs VC Concepts

- /Registration/, /register/: the state of a file  under version control

- /Repository/: where the present state and the change history of the files are
  stored

- /log entries/: change description

- /work file/: the current version of the file being worked on; a directory of
  work files is a /working tree/.

- /commit/ , /check in/: a change is recorded in the repository.

- /revision/: a commit/check-in creates a revision.

- /merge-based/ and /lock-based/: how the VCS handles concurrent modification on
  files. Merge-based mechanism merges different versions of a file from
  different users while a lock-based system allows only one user to work on the
  work file until it is committed.
  + Decentralized version control systems, such as Git and Mercurial, are
    exclusively merging-based.
  + Experience has shown that merging is superior to locking, both in
    convenience to developers and in minimizing the number and severity of
    conflicts that actually occur.
  + Older lock-based systems use the terms "check in" and "check out".

- /Changeset-based/ and /file-based/: how changes are organized as a unit. Newer
  systems are changeset-based and allow for more flexible control.

- /Decentralized/ and /Centralized/: in a decentralized VCS, a project may have
  several different repositories. Different repositories can be merged to
  reconcile their change histories. In a centralized VCS, the user only gets a
  copy of a certain version of the project, not the entire repository.

** Basic Operations

- =vc-next-action= :: confusing command but unavoidable.

- =vc-register= :: register the file in the repository

- =vc-diff=, =vc-ediff=, =vc-root-diff= :: compare two revisions. Without a prefix argument, it defaults to
  the work files and the last revision.

- =vc-revision-other-window= :: show a revision of the current file in another
  window

- =vc-annotate= :: for each line, show the latest revision in which it was
  modified.

- =vc-print-log=, =vc-print-root-log=, =vc-log-incoming=, =vc-log-outgoing=, =vc-region-history= ::

- =vc-revert= :: revert the work file to its last revision.

- =vc-ignore= :: ignore a file under the current VCS.

- =vc-retrieve-tag= :: check out a branch or a tagged revision

- =vc-create-tag= :: create a tagged revision. With a prefix argument, creates a branch.

- =vc-delete-file=, =vc-rename-file= ::

- =vc-push=, =vc-update= :: push/pull; =vc-push= does not exist in a centralized
  VCS, where a changeset commit includes a push.

- =vc-merge= :: merge changes from another branch into the current one.

** VC Directory Mode

=vc-dir= enables the VC Directory buffer, optionally with a prefix argument.

Somewhat similar to Dired Mode. Files can be marked or unmarked.

* Projects in Emacs
:PROPERTIES:
:ID:       328872db-f464-4fca-b9ac-4fc428e7b3ed
:END:

Emacs supports project management.

#+begin_quote
A project is a collection of files used for producing one or more programs.
#+end_quote

Two backends [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Version-Control.html][VC]] and [[https://www.gnu.org/software/emacs/manual/html_node/emacs/EDE.html][Emacs Development Environment]] determine whether a directory
is a /project root/.


** Commands

- =project-find-file=, =project-find-regexp=, =project-search= ::

- =project-dired= ::

- =project-vc-dir= ::

- =project-eshell=, =project-shell= ::

- =project-compile= ::

-  =project-shell-command=, =project-async-shell-command= ::

- =project-switch-to-buffer= ::

- =project-kill-buffers= ::

- =project-switch-project=, =project-forget-project= ::

** Emacs Development Environment

Not used much, not recommended.

#+begin_quote
A package that simplifies the task of creating, building and debugging large
programs with Emacs.
#+end_quote
* Emacs Server

Emacs server is meant only for local use, even if a TCP socket is used.

* Emacs Lisp Packages

- =list-packages=: =h=, =?= =RET= etc. This menu can be operated on.

** Installation

- =package-install=: packages are downloaded from =package-archive=s

Emacs searches =package-user-dir= and =package-directory-list= for installed packages.

* Packages
** [[https://www.gnu.org/software/emacs/manual/html_mono/ido.html][Ido]]: Interactive Do

TODO

** TRAMP: Transparent Remote Access Multiple Protocol

=/method:user@host:/path/to/file=

#+begin_src
/smb:user%domain@host:/path/to/file # windows SAMBA
/ssh:user@host#port:/path/to/file # SSH with a custom port
/sudo: # use another user's identity for a while
/su: # as another user
#+end_src

Supports ssh, telnet, samba, GVFS, FUSE, Android adb

- *inline methods*: use the same login connection to transfer file contents
  + ssh, telnet, su, sudo, plink

- *external methods*: operate over multiple channels
  + rcp, scp, rsync, fcp, ftp, smb
  + GVFS: atp, dav(s), gdrive, mtp, nextcloud, sftp
  + FUSE: sshfs
  + docker, kubernetes, magit, hdfs,vagrant

- Some useful options
  + =tramp-remote-path=

** CC Mode

- Basic options
  + =c-basic-offset=: indentation offset
  + =c-default-style=: the basic style of indentation

- =C-c .=: =c-set-style=

- =C-c :=: =c-scope-operator=

- =C-c C-z=: =c-display-defun-name=

- =C-c C-e=: =c-macro-expand=

** Emacs Vim Mode

*** Viper

Implemented as a collection of minor modes.

- =C-z=: enter/exit Emacs state.

** flycheck

- =C-c ! n/p= (=flycheck-previous/next-error=): navigate through errors

- =C-c ! l= (=flycheck-list-errors=)

** Ivy

A minubuffer completion framework.

- =ivy=: provides a basic framework and UI for listing/search/filtering/completion while
  typing in more details
  + =ivy-read=

- =swiper=: search

- =counsel=: provides some useful command based on ivy and more abstraction
  + =counsel-find-file=
  + =counsel-M-x=
  + =counsel-describe-function=
  + =counsel-describe-variable=
  + =counsel-find-library=
  + =counsel-git=, =counsel-git-grep=, =counsel-ag=, =counsel-locate=

** Treemacs

Managing directories as workspaces

- *workspace*: multiple projects (folders) forms a single workspace.

- =treemacs-advanced-helpful-hydra=

** Projectile

- =projectile-mode=: a minor mode that needs to be enabled.

A portable project interaction library for easy project management and navigation.
  + searching/replace in the directory

- *project*: a folder containing some special file (a VCS marker or a project
  descriptor file).
  + marker: =.projectile=, VCS directories, some project description file.

- =Lead-key p=

- =projectile-find-file=

- =projectile-switch-project=

- =lead-key p s=: =search-project=

- =projectile-find-other-file=: find related file (e.g. source - header)

* Language Server Protocol

** =lsp-mode=

- code completion:
  + =completion-at-point=

- code actions on the modeline: refactor, format, rename

- hovers (=lsp-ui=)

- code outline =imenu=, =helm-imenu=

- code navigation =xref=, =lsp-treemacs=, =lsp-ui=
  + =lsp-find-definition=
  + =lsp-find-references=

- code lens

- breadcrumbs on headline, the hierarchy information of the current cursor.

** =lsp-ui=

- =lsp-ui-sideline=: various information on the right line

- =lsp-ui-peek=: peek defintions, references. similar to that of VSCode.

- =lsp-ui-doc=: show docs

- =lsp-ui-imenu=: show imenu entries
  + =lsp-ui-imenu-auto-refresh=

** =lsp-treemacs=

- =lsp-tremacs-sync-mode=: set to 1

- =lsp-treemacs-errors-list=: show errors at the bottom (like in VSCode)

- =lsp-treemacs-symbols=: show symbols, outline on the left.

- =lsp-treemacs-references/implementations=: show references/implementations at
  the bottom (like in Visual Studio).

** =lsp-ivy=

- =lsp-ivy-workspace-symbol=

- =lsp-ivy-global-workspace-symbol=

  Show symbols in ivy's interactive completion interface.

** =dap-mode=

- =dap-debug=: use a debug template to start the debugging

- =dap-debug-edit-template=: prepare a template declaration inside a temporary buffer.

** Useful Language Servers

*** Java

**** [[https://projects.eclipse.org/projects/eclipse.jdt.ls/downloads][Jdtls]]

***** Use with =lsp-mode=

#+begin_src elisp


;; to use with lombok
(add-to-list 'lsp-java-vmargs
               (concat "-javaagent:" lsp-java-lombok--jar-path))
#+end_src

*** C#

**** [[https://github.com/OmniSharp/omnisharp-roslyn][Omnisharp]]

A .NET development platform based on Roslyn that provides project dependencies
and C# language services to various IDEs and plugins.

***** Use with =lsp-mode=

#+begin_src elisp
(setq lsp-csharp-server-path
      "/media/djn/opt/software/omnisharp/OmniSharp")
#+end_src


**** Debugging

#+begin_src elisp
(require 'dap-netcore)
(setq dap-netcore-install-dir "/media/djn/opt/software/netcoredbg/)"
#+end_src

=dap-mode= requires a vscode =launch.json= configuration.

Refer to [[https://www.yvesdennels.com/posts/dotnet_debugging_with_vscodium/][Dotnet debugging with VSCodium on Linux]]
Works but hard to use.

#+begin_src json
{
    "version": "0.2.0"
    "configurations": [
        {
            "name": ".NET Core Attach (console)",
            "type": "coreclr",
            "processId": "${command:pickProcess}",
            "request": "attach", // use launch to start a process and "program" to specify the compiled assembly
            "console": "integratedTerminal",
            "stopAtEntry": false,
            "internalConsoleOptions": "openOnSessionStart",
            "pipeTransport": {
                "pipeCwd": "${workspaceFolder}",
                "pipeProgram": "bash",
                "pipeArgs": ["-c"],
                "debuggerPath": "/media/djn/opt/software/netcoredbg/netcoredbg",
                "quoteArgs": true
            }
        }
    ,]
}
#+end_src

To debug tests, set =VSTEST_HOST_DEBUG=1= when launching the test on the CLI and
attach to the test host.
