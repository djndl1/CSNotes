#+title: DOS Programming

* FreeDOS

** Serial Console

- start =ctty COM1= at the DOS side and start a serial port communication client
  at the client side.
  + =stty con= returns control to the graphics console.

** File Transfer To/From the VM

- [[https://www.freedos.org/books/get-started/24-guestmount-freedos/][mount the virtual disk with =guestmount=]]

- install =ssh2dos= and configure the host to support older algorithms.
  + check =sshd='s log to find out missing algorithms.
  + will no longer works with future builds of OpenSSH.

- use the kermit protocol
  + it requires both sides set up kermit and start the connection.

- the best and easiest is to set up a ftp on the host e.g. =vsftpd=. No security
  bullshit, best compatibility


* [[../../lang/c/assembly/x86_legacy.org][8086 Architecture]]

* DOS Architecture
:PROPERTIES:
:ID:       0ee575a2-a7eb-4e8e-b962-c1a282d9e28d
:END:

- *BIOS* :: an interface to the hardware at boot time and run time
  + the console
  + a generic line printer
  + the auxiliary device (usually a serial port)
  + the computer clock
  + the boot disk device
  + provides some system services

- *DOS Kernel* :: =MSDOS.SYS=, providing system services accessed by means of a
  *software interrupt*.
  + filesystem management
  + memory management
  + character device I/O
  + time/date support
  + program management
  + provides system services through =INT 21H=

- *Command Processor* :: =COMMAND.COM= the shell
  + loaded at boot time
  + has three modules
    + *resident module*: remains loaded in the memory as long as the computer is
      turned on, processing =Ctrl-Break= and =Ctrl-C= and loading the transient
      module if not loaded.
    + *initialization module*: processing =AUTOEXEC.BAT=
    + *transient module*: loaded in the high end of /user/ memory, processing
      commands and executing them.
  + can be replaced

* DOS API Programming
:PROPERTIES:
:ID:       91dd13c3-9b3f-435a-a5ab-4c3c6c546865
:END:

Most calls to the DOS API are invoked using the =INT 21H= software interrupt
with a subfunction number in the =ah= register, basically a kernel syscall.

** Keyboard

Whenever a key is pressed or released, a scan code is generated and the =0x09=
interrupt is generated. A release scan code is the press scan code with bit 7 set to 1.

Normally, the BIOS is responsible for handling the
interrupt by setting some flags (e.g. =Ctrl=, =Alt=, =Shift=), generating
another interrupt (=Ctrl-Break=, =Ctrl-C= to Int 23H, =Alt-SysReq=),
or setting the keyboard buffer by placing the key's ASCII code (0 if none) and then scan code.

DOS kernel keyboard APIs are sensitive to input redirection (=stdin= and =stdout=).

*** =Ctrl-C=, =Ctrl-Break=

Upon pressing =Ctrl-C= or =Ctrl-Break= (higher priority), DOS reads in and generates an =INT 23H=,
of which the default handler is to terminate the current process.

DOS also maintains a break flag, with the value of which being 0,
DOS only checks for a =Ctrl-Break= during certain I/O operations while the value
1 causes DOS to check every time a DOS service is called.

* BIOS Interrupt Call

The IBM PC BIOS sets up its interrupt handlers and provides basic hardware
control to the software running on the
machine, even though one may access hardware directly.

Modern OSes bypass any BIOS interrupt calls at all after startup due to real-mode
switch, limited memory address space, BIOS code performance issue, limited
functionality and compatibility issue of BIOS calls: a modern OS takes matters
in its own hands.


* DOS Extender

DOS cannot run under protected mode because DOS and BIOS are written in
real-mode code. Even if the program does not use any DOS or BIOS services, an
asynchronous system event would call into real-mode code and crash the system
due to the different semantics of memory segmentation.

A DOS extender enables software to run in a protected moe environment even the OS is only
capable of operating in real mode. A DOS extender is a program that "extends"
DOS so that programs running in protected mode can transparently interface with
the underlying DOS API, even though segmented memory is different under real
mode and protected mode. It is also responsible for transferring data between
the real-mode 1MB memory and the protected-mode program. For performance, a DOS
extender may implement many DOS API in protected mode and intercepts related
interrupts, similar to a miniature OS. It also traps system events such as a
timer tick or the keyboard interrupt and causes a switch to real mode and back.

Two interface specifications were proposed: VCPI and DPMI and the later took
over the market, primarily due to Windows 3.0 support.

A DPMI server runs in ring 0. 32-bit DOS programs run in protected user
mode (ring 3) and access system service via a client library.

** DOS Protected Mode Interface (DPMI)

Extended memory can also be accessed directly by DOS programs running in
protected mode using DPMI or VCPI (succeeded by DPMI).

*** Notable Implementations

- DOS/4G(W) (included with Watcom C compiler)
  + embedded in the executable at linking time or run before the app
  + limited support for emulated DOS environment

- DOS/16M: a 286 DOS extender to access all 16MB memory.

- [[https://github.com/amindlost/dos32a][DOS/32]] (open source compatible clone of DOS/4G)
  + also [[https://github.com/yetmorecode/dos32a-ng][a modern version]]

- CauseWay

- Microsoft Windows except NT

**** GO32 (used by older versions of DJGPP and Free Pascal)

Not really a DPMI implementation

- loading the COFF application and setting it up for execution

- unix-style command-line expansion

- floating-point emulation in protected mode

- graphics support

  The extender is loaded into conventional memory and occupies 130KB, which
  means programs can only reach a nested level of 3 or 4.

**** CWSDPMI (used by DJGPP)

***** Startup Code

A stub loader is prepended to compiled programs. This stub does a few
preparation before loading the COFF executable:

- allocate memory for the transfer buffer for passing data to and from
  real-mode services.

- check whether a DPMI server is loaded and load =cwsdpmi.exe= if none.
  + =cwsdpmi.exe= is not loaded twice.

- read the COFF executable header into memory

- switch the CPU into protected mode with the help of the DPMI host.

- set up the program's code and data segments

- load the actual COFF executable into memory and jump to its entry point.

then the library startup code takes over:

- make the null page uncommitted so that a null pointer dereference triggers a
  segfault signal.

- set up memory allocation mechanism

- set up run-time stack for the program.

- allocate a selector (=_dos_ds=) for accessing conventional memory
  + yes, conventional memory can be accessed under protected mode.

- set up the signal handling

- set up the environment array

- get and expand the command-line arguments (unix-style)

- set up x87 FPU and FP emulator

- call static constructors

- enter the =main= function.

***** Transfer Buffer

Data related to BIOS or DOS calls are transferred via a data buffer in the
conventional memory (*transfer buffer*), 16 KB kong by default. Then a real-mode
segment:offset pair to that buffer is passed to real-mode code. Similarly, data
from real mode is copied into this buffer by DOS or BIOS and later copied from
there to a protected-mode memory region specified by the protected mode program.
This process is done by the library transparently.

* Memory Management

** The First 1MB Memory Map

Just because the 8086 processor can reference 1 MB of memory does not mean that
8086 machines came equipped with 1 full MB of RAM. Machines typically included
less than that for cost reasons, so it's critical to understand that the address
space—that is, the set of addresses that can be referenced—is different from the
amount of memory installed.
certain system devices prefer to expose themselves as part of the address space.
For example: the BIOS ROM is accessible via a range of addresses in upper
memory. Or another example: video cards tend to expose their framebuffer as a
memory-mapped device so that applications can directly write to well-known
addresses to manipulate video memory—bypassing the separate I/O bus and
instruction set.

#+begin_src
┌─────────────────────────────────┐ FFFFF (1M)
│                                 │
│           BIOS                  │
├─────────────────────────────────┤ E0000
│                                 │
│                                 │
│        Reserved                 │
│                                 │
├─────────────────────────────────┤ A0000 (640K)
│  Transient COMMAND.COM          │
├─────────────────────────────────┤
│                                 │
│                                 │
│                                 │
│                                 │
│     Transient Program area      │
│        (user memory)            │
│                                 │
│                                 │
│                                 │
├─────────────────────────────────┤
│   Resident COMMAND.COM          │
├─────────────────────────────────┤
│          Buffers, Drivers       │
├─────────────────────────────────┤
│                                 │
│             DOS Kernel          │
│                                 │
├─────────────────────────────────┤
│             BIOS                │
├─────────────────────────────────┤ 00400
│           Interrupt             │
│         Vector Table            │
└─────────────────────────────────┘ 00000
#+end_src

There are a few techniques to make more memory available even with limited 1MB
address space, notably *expanded
memory* (EMS, hardware), *expanded memory* (EMS, MMU and software), *Upper Memory Blocks*
(UMB, MMU and software), *High Memory Area* (UMB, 286 A20 bus line) or *Extended Memory Specification* (EMS, with 386 protected mode).

** Expanded Memory

Mapping additional memory into a 64-KB region in the UMA and
the mapping can be changed dynamically by software, possibly with necessary
hardware support but it does not require protected mode support.

Lotus, Intel and Microsoft developed a standard (EMS) to allow access of up to
32 MB of expanded memory.

*** Software Emulation (MMU Required)

Pure software solution that utilizes the MMU pagination and virtual 8086 mode of 80386 to map memory
so that an app can peek into extended memory via a 64KB windows. This emulates
previous hardware-implemented expanded memory. Or any unused blocks in the upper
memory area could be used to map extended memory (*Upper Memory Blocks*).

- =EMM386=: MS-DOS builtin

- =Jemm=: open-source solution

** Extended Memory

Any memory above 1MB under DOS, which cannot be directly accessed under real
mode or virtual x86 mode.

Under protected mode (286), the MMU takes charge of all memory access and the segment
becomes an index into the GDT or LDT table, a data structures that maintains the
segment info. A segment is no longer restricted to 64KB and is defined inside an
descriptor entry. The MMU checks whether the base plus offset is out of bound
and generates a general protection fault (segfault) if so.

*** High Memory Area (HMA)

The =segment:offset= addressing format leaves some space not addressable under
8086, the space after =0xFFFF:0x0010=

80286 has a 24-bit address bus. To maintain compatibility with 8086 programs
that rely on memory address wraparound, IBM wires
the 21st bus line A20 to zero by default on the motherboard. If this A20 line is enabled, an additional
(64KB - 16B) memory, now addressable on 8086, is available (HMA).

*** Extended Memory Specification (XMS)

Extended memory may be accessed through the XMS API, which takes care of memory
management and copying memory between conventional and extended memory by
temporarily switching the processor into protected mode (not exactly, most
implementations used the undocumented =LOADLL= instructions without going
through mode switching or sets up the GDT in protected mode and enters unreal
mode).
A driver (such as =HIMEM.SYS=) is required to manipulate the extended memory blocks.

**** Implementations

- =HIMEM.SYS=: from Microsoft, first included in MS Windows 2.1

- =HIMEMX.SYS=: from FreeDOS

*** Full Protected Mode Application

A DOS extended sets up protected mode and the app runs in a 32-bit environment.
In addition, they provide the same DOS API in protected mode and implement them
as natively as possible without delegating to real-mode DOS: they are their own
mini OS on top of DOS.

* DOS ABI

** Binary File Format

*** *COM*: CP/M =.COM=
  + no header, only code and data in a single segment, loaded at a preset
    address of offset 0x100 following the PSP.
  + maximum size of 0xFF00 bytes

*** *MZ*: DOS =.EXE=

Supports multiple segments to be loaded at arbitrary memory addresses and
executables greater than 64KB.

The loader patches certain operands and values at load time with the relocation
table to support relocation. The table lists all addresses of which the value needs patching.

For MZ executables, segment names are mostly a linker concept, segment names
are not preserved in a produced executable but used by a linker to create such
an executable. Still, a linker may not even understand =_TEXT=, =_DATA= or =STACK=:
these are just conventions.

An assembler embeds the start address of a OMF module at the end of the file
declared by NASM special symbol =..start=, or MASM =end procname= at the end of
a module source file (exactly what OMF is doing, at the end). The linker
retrieves this entry address and set up =CS:IP= in the MZ header. The linker
also set =SS= to the beginning of a =STACK= segment and =SP= to the size of the
segment. The loader loads the program and adjusts =CS=, =IP=, =SS= accordingly.
The startup code then sets these registers again to conform to a certain memory model.

* Toolchains

** [[http://www.delorie.com/djgpp/][DJGPP]]

Still maintained and regularly updated to the latest GCCC.

*** Installation

There is a [[https://github.com/andrewwutw/build-djgpp/tree/master][build script]] on Github for each platform, though out of date. The
official site provides mainly the DOS port.

*** Features

- C, C++, Fortran, Ada, Objective-C/C++ compilers

- many Unix command line tools on DOS

- ANSI and POSIX compliance

- Long command line support (over 126 characters)
  + passed via the transfer buffer

- Unix-style filename globbing

- Supports =system= with Unix shell emulation.
  + external programs are preferred over the builtin in =command.com=

- transparent long file name support

- filesystem extensions
  + hook for certain filesystem calls

- file link emulation

- a few utility tools
  + =djtar=: archiver
  + =djsplit=, =djmerge=: split and merge files
  + =dtou= and =utod=: EOL converters
  + =redir=: full Unix redirection
