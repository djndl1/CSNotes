#+title: Mingw

* [[https://www.mingw-w64.org/][MinGW-w64]]

The current de facto standard GCC on Windows.

- Support since Windows 2000

- Has DDK and DirectX support from other projects.

- provides optional secured C-runtime API and headers

** Binary Distributions

- [[https://sourceforge.net/projects/mingw-w64/][Official SourceForge]]: binary releases are unmaintained.

- [[https://github.com/niXman/mingw-builds-binaries][Mingw-builds]]: After GCC v11.2

- [[https://winlibs.com/][WinLibs]]: actively maintained comprehensive toolchains that includes GCC, LLVM
  and various other tools.
  + has support for [[https://github.com/lhmouse/mcfgthread/][MCF threading library]]
  + with MSVCRT and UCRT as CRTs.

- [[https://github.com/skeeto/w64devkit][w64devkit]]: GCC, GDB, GNU Make, NASM, Vim, Ctags, busybox with Windows XP
  backwards compatibility

- [[https://www.msys2.org/][MSYS2]]: provides not only GCC toolchains, but a whole Unix-like environment.
  + rolling-release.

- [[https://gcc-mcf.lhmouse.com/][GCC-MCF]]: GCC with the MCF threading library (a reimplementation of the gthread
  interface set, requires Windows 7 or later)

- [[https://jmeubank.github.io/tdm-gcc/][TDM-GCC]]: provides both MinGW.org and MinGW-w64 versions with various patches.
   None work with Windows XP anymore.
   + uses =winpthreads= for POSIX threading support.

- the famous Cygwin provides native MinGW-w64 GCC.

- [[https://github.com/mstorsjo/llvm-mingw][llvm-mingw]]: not GCC.

** Components

*** [[https://sourceforge.net/p/mingw-w64/wiki2/gendef/][gendef]]

TODO

*** genidl

TODO

*** widl

=stdole32.tlb= is the version 1.0 of =stdole2.tlb= (2.0). They even have the
same UUIDs. Some IDLs import them
both (e.g. OPC DA). Only =stdole2.tlb= is needed actually. There seems to be an
older version of the typelib file format (1.0).

Also, the microsoft =midl= seems to be case-insensitive with certain identifiers
while =widl= requires strictly equal cases.

** Cross Compilation

- Build triplets: =i686-w64-mingw32= and =x86_64-w64-mingw32=.

TODO

** Unicode

- =wmain=: UTF-16 environment and command line arguments, as well as a MBCS version.
  +  =-municode= is necessary and the macros =_UNICODE= (for =tchar.h=) and =_UNICODE= (for Win32 API functions) should be defined.
  + =wmain= should be marked as =extern "C"= under C++.

** C Standard Confornmance

*** =printf= family

- The [[https://mingw.osdn.io/][Old MinGW]] seems to accept =%s= with =wchar_t*=, the standard way
  is to use =%ls=, to which MinGW-w64 complies (with =%s= and =wchar_t*=
  the output is completely blank).

- MinGW by default uses the builtin old =MSVCRT.DLL=, which does not have a C99
  implementation of =printf=.

- MinGW-w64 provides its own =__mingw_printf= (enabled with
  =__USE_MINGW_ANSI_STDIO=1=) as a conformant replacement for =printf=.
  + as MinGW-w64 v8.0.0, =USE_MINGW_ANSI_STDIO= is enabled automatically with MSVCRT.

** [[https://reactos.org/wiki/PSEH][PSEH]]: SEH Handling

#+begin_src cpp
#include <pseh/pseh.h>

#include <windows.h>
#include <iostream>


using std::cout;

extern "C"
int wmain(int argc, wchar_t *argv[]) {
    _SEH_TRY {
        int a = 4;
        int b = a / 0;
    }
    _SEH_HANDLE {
        std::cout << "divied by zero: " << std::hex << _SEH_GetExceptionCode() << '\n';
    }
    _SEH_END;

    return 0;
}
#+end_src

*** =__try1=

Sorta works, but limited

[[https://sourceforge.net/p/mingw-w64/mailman/message/35219710/][Report on __try1 and SEH]]

[[http://www.programmingunlimited.net/siteexec/content.cgi?page=mingw-seh][SEH and MinGW]]
