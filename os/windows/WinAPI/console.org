#+title: Console

For GUI apps, console must be allocated and freed with =AllocConsole()= and
=FreeConsole()=. A process may have only one console. The console can be
read/written with =ReadFile()= and =WriteFile()= but =ReadConsole()=,
=WriteConsole()= and =SetConsoleMode()= provide console-specific features.
Console I/O operates on characters rather than bytes. =CONIN$= and =CONOUT$= are
special file names that always refer to the console input and output.

* Why Windows Console Is Slow

The Windows Terminal itself is poorly written and renders slowly.
A console app is hosted by a =conhost= process between the child process and its
parent, which handles the three standard I/O handles, adding more IPC overhead.
The Windows console subsystem itself adds overhead as it adds a few preprocessing.

** Reference

- [[https://github.com/cmuratori/refterm/blob/main/faq.md][Refterm FAQ]]

* Unicode

https://alfps.wordpress.com/2011/12/08/unicode-part-2-utf-8-stream-mode/

http://archives.miloush.net/michkap/archive/2010/10/07/10072032.html

http://illegalargumentexception.blogspot.com/2009/04/i18n-unicode-at-windows-command-prompt.html

http://illegalargumentexception.blogspot.com/2009/04/java-unicode-on-windows-command-line.html

https://alfps.wordpress.com/2011/11/22/unicode-part-1-windows-console-io-approaches/

https://devblogs.microsoft.com/cppblog/new-options-for-managing-character-sets-in-the-microsoft-cc-compiler/

https://www.hekster.org/Professional/ConsoleEncoding/

** Some Facts

#+begin_quote
 - WriteConsoleW() is not affected by the console output code page (GetConsoleOutputCP)
 - WriteConsoleA() is indirectly affected by the console output code page: if a string cannot be encoded to the console output code page, you cannot call WriteConsoleA with the result...
 - If the console font is a raster font and and the font doesn't contain a character, the console tries to find a similar glyph, or it falls back to the character '?'
 - If the console font is a TrueType font, it is able to display most Unicode characters
#+end_quote

Internally, Windows NT uses UTF-16. Any data other than UTF-16 treated as text from the kernel
has to be converted to its target character set. The console accepts UTF-16
characters and then renders them without any conversion inside the kernel.
Under Unicode mode, an output stream expects a UTF-16 parameter and output them
as the mode intends.

There is no difference between UTF-16 and UTF-8 if the output target is a
console as the console simply displays the characters but files have to contain
them on the disk.

** Dig into the UCRT Source

*** =_write=

Depends on whether the output is a console, the text/binary mode,
UTF-16/UTF-8/ANSI output mode, the function determines whether a
second conversion to the console's code page is required and dispatch actual
work to several different helper functions that write into =WriteFile=
(=WriteFile= writes byte data and thus has only a Unicode version) or =WriteConsoleW=.

For normal console output, the mode means Win32-level input mode:

- ansi mode: double conversion from CRT locale to the console's
  code page via UTF-16 before being written to =WriteFile=.
  Note that =WriteFile= is technically a higher-level function
  than =WriteConsoleA/W= and it determines the handle is a console and write the
  ansi data to =WriteConsoleA= (or probably converted to UTF-16 again losslessly
  and then =WriteConsoleW=). Three conversions in total.
  + if the CRT locale is ="C"=, no conversion before =WriteFile=. There is a
    conversion from the console code page to UTF-16.

- utf16, utf8: the buffer is assumed UTF-16 and thus no conversion before
  =WriteConsoleW=. The console simply accepts UTF-16 strings and renders them in
  the window without being affected by the console output code page.

For non console output. =WriteFile= writes the byte data as is. The mode means
output mode.

- ansi mode: no charset conversion before =WriteFile=, written as is to the file.

- utf16 mode: the input is assumed a utf-16 character buffer. No conversion
  before =WriteFile=

- utf8 mode: The assumed UTF-16 buffer is converted to UTF-8 before =WriteFile=.

*** =fwrite=

Built on =_write()= instead of being built directly on =WriteFile=.

*** =printf= family

Built with =output_processor=, which dispatches to =stream_output_adapter=
and character traits based on the stream and the character type. All streams
are sent to =_write=.

For wide characters, if the stream is in ansi mode, they are first converted to
byte strings based on the current locale and then sent to =_write=. This
behavior is similar as in Linux. Although for byte strings under ansi mode
written to the console, additional conversions are waiting.

Under a Unicode mode, they are directly sent to =_write= and as Unicode written
directly to the console without any conversion along the way.

*** =_cprintf= family

Another set of console I/O API that writes directly to the console.
Built with =output_processor=, which dispatches =console_output_adapter=

Wide strings are directly sent to =WriteConsoleW=. Narrow strings are first
converted to UTF-16 (lossless) and then to =WriteConsoleW=. The conversion is
done by =mbtowc=, which converts nothing if the =C= locale is used.

** Analysis

The underlying I/O interface on Windows is =WriteFile= and =WriteConsoleW=,
which writes a buffer without considering about code pages or writes UTF-16
characters.
The only problem is that the source strings may be affected by the locales
of both the program and the console and the stream translation mode
due to conversions before the final Win32 call.

Binary mode is not affected by code page settings.

For narrow characters, they may or may not be converted before =WriteFile=.
They may be written as they are (ANSI), as UTF-8 (converted from UTF-16) or as
UTF-16 (the buffer is assumed already to contain UTF-16 data).

For wide characters, with standard I/O, they are converted under ansi mode but
used directly under Unicode mode. Unicode modes are for UTF-16 buffers to be
written directly to the underlying stream: they are locale-independent.

For console output, narrow characters may have to be converted
into the console's code page using UTF-16 as an intermediate charset.

The ="C"= locale set on program startup prevents any conversion from ansi to
UTF-16. If written to a console in ansi mode with the ="C"= locale, =_write=
writes as is, =printf= does some conversion and treats narrow strings as ansi data.

** Experiment

The following code should have the commented standard-conformant result.


#+BEGIN_SRC C++
#include <stdio.h>
#include <wchar.h>
#include <locale.h>
#include <windows.h>
#include <fcntl.h>
#include <conio.h>

const wchar_t *utf16 = L"Aō中文\n";
const char *Test2 = "Aō中文\n";

void print_string_in_code_page(const char *locale, UINT cp, const char *str)
{
	setlocale(LC_CTYPE, locale);
    SetConsoleOutputCP(cp);
	printf("%s\n", str);
}

void wprint_string_in_code_page(const char *locale, UINT cp, const wchar_t *str)
{
	setlocale(LC_CTYPE, locale);
    SetConsoleOutputCP(cp);
	wprintf(L"%ls\n", str);
}

void WriteConsole_string_in_code_page(UINT cp, const wchar_t *str)
{
	SetConsoleOutputCP(cp);
	DWORD cnt = 0;
	WriteConsoleW(GetStdHandle(STD_OUTPUT_HANDLE), str, wcslen(str), &cnt, NULL);
}

void utf16_wprintf_c_ansi_mode()
{
	const wchar_t ws[] = L"UTF-16_C_65001_ANSI_mode: Aō中文\n";
	//_setmode(_fileno(stdout), _O_U8TEXT);
	wprint_string_in_code_page("C", 65001, ws);
	// garbled
}

void utf16_wprintf_zh_cn_ansi_mode()
{
	const wchar_t ws[] = L"UTF-16_zh_CN_65001_ANSI_mode: Aō中文\n";
	//_setmode(_fileno(stdout), _O_U8TEXT);
	wprint_string_in_code_page("zh_CN", 65001, ws);
	// garbled
}

void utf16_wprintf_c_unicode_mode()
{
	const wchar_t ws[] = L"UTF-16_C_65001_Unicode_mode: Aō中文\n";
	_setmode(_fileno(stdout), _O_U8TEXT);
	wprint_string_in_code_page("C", 65001, ws);
	// UTF-16 -> UTF-8
}

void utf16_wprintf_zh_cn_1252_unicode_mode()
{
	const wchar_t ws[] = L"UTF-16_zh_CN_1252_Unicode_mode: Aō中文\n";
	_setmode(_fileno(stdout), _O_U8TEXT);
	wprint_string_in_code_page("zh_CN", 1252, ws);
	// UTF-16 -> UTF-8
}

void utf16_WriteConsole_1252_unicode_mode()
{
	const wchar_t ws[] = L"utf16_WriteConsole_1252_unicode_mode: Aō中文\n";
	WriteConsole_string_in_code_page(1252, ws);
	// UTF-16 -> UTF-8
}


void exec_charset_printf_default_ansi()
{
	// I'm on a Chinese environment
	print_string_in_code_page("zh_CN", 936, "exec-charset default: Aō中文\n");
	// depends the execution charset, garbled with utf-8, correct with gbk
}


void utf8_printf_c_ansi()
{
	print_string_in_code_page("C", 65001, "UTF8_C: \x41\xC5\x8D\xE4\xB8\xAD\xE6\x96\x87\n");
    // no conversion into the stream,
}


void gbk_printf_c_ansi()
{
	print_string_in_code_page("C", 936, "GBK C: A\xa8\xad\xd6\xd0\xce\xc4\n");
	// GBK, no conversion
}

void gbk_printf_zh_cn_ansi()
{
	print_string_in_code_page("zh_CN", 936, "GBK zh_CN: A\xa8\xad\xd6\xd0\xce\xc4\n");
	// GBK -> UTF-16 -> GBK no problem
}

int main(int argc, char *argv[])
{
	if (argc == 1) {
		utf16_wprintf_c_ansi_mode(); // garbled
		utf16_wprintf_c_unicode_mode(); // correct
		utf16_wprintf_zh_cn_ansi_mode(); // correct
		utf16_wprintf_zh_cn_1252_unicode_mode(); // correct
	}
	else if (argc > 2)
	{
		utf16_WriteConsole_1252_unicode_mode();
	}
	else {
		utf8_printf_c_ansi();
		gbk_printf_c_ansi();
		gbk_printf_zh_cn_ansi();
		exec_charset_printf_default_ansi();
	}
}
#+END_SRC

** Conclusions

Unicode modes or direct console =WriteConsoleW= are not affected by locales or the console code page.
ANSI console with the "C" locale is as raw as possible.
ANSI console normally tries to convert the input to UTF-16 while ANSI file
streams accept them as is due to the file's ANSI requirement but it does not
really check the current locale to ensure the output charset is in the one
mandated by the locale.

Be aware that MSVC recognizes the source file as UTF-8 by the BOM but it does
not translate narrow strings to UTF-8 just because of the BOM. By default, the
execution charset is the current code page. To ensure correct behavior to use
UTF-8 with ANSI mode, explicitly set the execution charset.

*** Raw Output Solutions

The real raw output is to use binary mode. But here a less stricter definition
translates =LF= to =CRLF=, with the following solutions:

- Console:
  + =printf=: set the locale to =C= and the console to ansi, the output is the
    same as in the buffer (the Linux behavior, though under Linux's =printf= is
    not actually affected by the locale).

- File:
  + =fprintf=: set the file to ansi and send ansi strings.

*** UTF-8 Solutions

- ANSI Console:
  + set the console's code page to 65001 UTF-8. It has to be set.
    The conversion happens before =WriteConsole=. If the code page is incorrect,
    the output would be garbled already, with no way to convert it back with
    other tools.
  + the file mode is set to ansi and the locale is set to ="C"=
  + the input buffer should be in UTF-8 with the =printf= family.

- Unicode Console: not really UTF-8 output from the console as it is a displayed window.
  + the console's code page is irrelevant.
  + the file mode is set to UTF-8/16 and the locale is not relevant.
  + the input buffer should be in UTF-16 with the =wprintf= family.

- ANSI mode file:
  + the file mode is set to ansi
  + the input buffer should be in UTF-8 with the =fprintf= family.
    After all, the file is supposed to accept ANSI strings and UTF-8 is an ANSI
    code page (not really). This should be Lua's way to store UTF-8 files (and
    already used by newer versions of Windows 10).

- UTF-8 Unicode mode file:
  + set the file mode to UTF-8
  + the input buffer should be in UTF-16 with the =wfprintf= family.
  + this is a similar approach employed by C# and Java.

*** UTF-16 Solutions

- Console: use =WriteConsoleW= or set file streams to Unicode mode.
  The console always uses UTF-16.
  + Used by C#

- Files: use the UTF-16 mode with the =wfprintf= family

** TLDR

For C/C++ programs, the default locale is already "C"
so the console output needs only a proper code page to reflect the charset used
by narrow strings.
Streams are by default ANSI so in both cases, narrow strings are written to
=WriteFile= as the are (the console target needs additional conversion to UTF-16).
UTF-8 I/O is simple by making sure every strings in the code are UTF-8.

** Filenames

The remaining problem is that path names encoded in ANSI code pages are not
controlled ?.

TODO
